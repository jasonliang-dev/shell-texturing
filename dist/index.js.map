{
  "version": 3,
  "sources": ["../node_modules/src/types.ts", "../node_modules/src/utils.ts", "../node_modules/src/vec2-impl.ts", "../node_modules/src/mat3-impl.ts", "../node_modules/src/vec3-impl.ts", "../node_modules/src/mat4-impl.ts", "../node_modules/src/quat-impl.ts", "../node_modules/src/vec4-impl.ts", "../node_modules/src/wgpu-matrix.ts", "../src/obj-loader.ts", "../src/sky.wgsl", "../src/shell.wgsl", "../src/fxaa.wgsl", "../src/index.ts"],
  "sourcesContent": ["/**\n * The types you can pass to most functions that take an\n * array of numbers.\n */\nexport type BaseArgType = Float32Array | Float64Array | number[];\n\nfunction wrapConstructor<T extends new(...args: any[]) => any>(\n  OriginalConstructor: T,\n  modifier: (instance: InstanceType<T>) => void\n): T {\n  return class extends OriginalConstructor {\n    constructor(...args: any[]) {\n      super(...args);\n      modifier(this as InstanceType<T>);\n    }\n  } as T; // Type assertion is necessary here\n}\n\nexport const ZeroArray = wrapConstructor(Array<number>, a => a.fill(0));\n\n", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nexport let EPSILON = 0.000001;\n\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nexport function setEpsilon(v: number): number {\n  const old = EPSILON;\n  EPSILON = v;\n  return old;\n}\n\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nexport function degToRad(degrees: number): number {\n  return degrees * Math.PI / 180;\n}\n\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nexport function radToDeg(radians: number): number {\n  return radians * 180 / Math.PI;\n}\n\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nexport function lerp(a: number, b: number, t: number): number {\n  return a + (b - a) * t;\n}\n\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nexport function inverseLerp(a: number, b: number, v: number): number {\n  const d = b - a;\n  return (Math.abs(b - a) < EPSILON)\n     ? a\n     : (v - a) / d;\n}\n\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nexport function euclideanModulo(n: number, m: number) {\n  return ((n % m) + m) % m;\n}", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Mat3Arg } from './mat3';\nimport { Mat4Arg } from './mat4';\nimport { Vec2Arg, Vec2Type } from './vec2';\nimport { Vec3Arg } from './vec3';\nimport { BaseArgType } from './types';\n\nexport { Vec2Arg, Vec2Type };\n\ntype Vec2Ctor<T extends Vec2Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates am typed API for Vec3\n */\nfunction getAPIImpl<VecType extends Vec2Arg = Float32Array>(Ctor: Vec2Ctor<VecType>) {\n\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values.\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Vec2's specified type\n * it would be faster to use\n *\n * ```\n * const v = vec2.clone(someJSArray);\n * ```\n *\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nfunction create(x = 0, y = 0) {\n  const newDst = new Ctor(2);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Vec2\n * Also see {@link vec2.create} and {@link vec2.copy}\n *\n * @param x first value\n * @param y second value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends Vec2Arg = VecType>(x: number, y: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n\n  return newDst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.ceil(v[0]);\n  newDst[1] = Math.ceil(v[1]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.floor(v[0]);\n  newDst[1] = Math.floor(v[1]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.round(v[0]);\n  newDst[1] = Math.round(v[1]);\n\n  return newDst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp<T extends Vec2Arg = VecType>(v: Vec2Arg, min = 0, max = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.min(max, Math.max(min, v[0]));\n  newDst[1] = Math.min(max, Math.max(min, v[1]));\n\n  return newDst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n\n  return newDst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, scale: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + b[0] * scale;\n  newDst[1] = a[1] + b[1] * scale;\n\n  return newDst;\n}\n\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nfunction angle(a: Vec2Arg, b: Vec2Arg): number {\n  const ax = a[0];\n  const ay = a[1];\n  const bx = b[0];\n  const by = b[1];\n  const mag1 = Math.sqrt(ax * ax + ay * ay);\n  const mag2 = Math.sqrt(bx * bx + by * by);\n  const mag = mag1 * mag2;\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(cosine);\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a: Vec2Arg, b: Vec2Arg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a: Vec2Arg, b: Vec2Arg): boolean {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n\n  return newDst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, t: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n  newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n\n  return newDst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.max(a[0], b[0]);\n  newDst[1] = Math.max(a[1], b[1]);\n\n  return newDst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = Math.min(a[0], b[0]);\n  newDst[1] = Math.min(a[1], b[1]);\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar<T extends Vec2Arg = VecType>(v: Vec2Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar<T extends Vec2Arg = VecType>(v: Vec2Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n\n  return newDst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = 1 / v[0];\n  newDst[1] = 1 / v[1];\n\n  return newDst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nfunction cross<T extends Vec3Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const z = a[0] * b[1] - a[1] * b[0];\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = z;\n\n  return newDst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a: Vec2Arg, b: Vec2Arg): number {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v: Vec2Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  return Math.sqrt(v0 * v0 + v1 * v1);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v: Vec2Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  return v0 * v0 + v1 * v1;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a: Vec2Arg, b: Vec2Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a: Vec2Arg, b: Vec2Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const len = Math.sqrt(v0 * v0 + v1 * v1);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n  }\n\n  return newDst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = -v[0];\n  newDst[1] = -v[1];\n\n  return newDst;\n}\n\n/**\n * Copies a vector. (same as {@link vec2.clone})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy<T extends Vec2Arg = VecType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = v[0];\n  newDst[1] = v[1];\n\n  return newDst;\n}\n\n/**\n * Clones a vector. (same as {@link vec2.copy})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] * b[0];\n  newDst[1] = a[1] * b[1];\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = a[0] / b[0];\n  newDst[1] = a[1] / b[1];\n\n  return newDst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n\n/**\n * Creates a random unit vector * scale\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nfunction random<T extends Vec2Arg = VecType>(scale = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const angle = Math.random() * 2 * Math.PI;\n  newDst[0] = Math.cos(angle) * scale;\n  newDst[1] = Math.sin(angle) * scale;\n\n  return newDst;\n}\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero<T extends Vec2Arg = VecType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n\n  return newDst;\n}\n\n\n/**\n * transform Vec2 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4<T extends Vec2Arg = VecType>(v: Vec2Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const x = v[0];\n  const y = v[1];\n\n  newDst[0] = x * m[0] + y * m[4] + m[12];\n  newDst[1] = x * m[1] + y * m[5] + m[13];\n\n  return newDst;\n}\n\n/**\n * Transforms vec4 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat3<T extends Vec2Arg = VecType>(v: Vec2Arg, m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  const x = v[0];\n  const y = v[1];\n\n  newDst[0] = m[0] * x + m[4] * y + m[8];\n  newDst[1] = m[1] * x + m[5] * y + m[9];\n\n  return newDst;\n}\n\n/**\n * Rotate a 2D vector\n *\n * @param a The vec2 point to rotate\n * @param b The origin of the rotation\n * @param rad The angle of rotation in radians\n * @returns the rotated vector\n */\nfunction rotate<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(rad);\n  const cosC = Math.cos(rad);\n\n  //perform rotation and translate to correct position\n  newDst[0] = p0 * cosC - p1 * sinC + b[0];\n  newDst[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return newDst;\n}\n\n/**\n * Treat a 2D vector as a direction and set it's length\n *\n * @param a The vec2 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nfunction setLength<T extends Vec2Arg = VecType>(a: Vec2Arg, len: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n  normalize(a, newDst);\n  return mulScalar(newDst, len, newDst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec2 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nfunction truncate<T extends Vec2Arg = VecType>(a: Vec2Arg, maxLen: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, newDst);\n  }\n\n  return copy(a, newDst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nfunction midpoint<T extends Vec2Arg = VecType>(a: Vec2Arg, b: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(2)) as T;\n  return lerp(a, b, 0.5, newDst);\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  ceil,\n  floor,\n  round,\n  clamp,\n  add,\n  addScaled,\n  angle,\n  subtract,\n  sub,\n  equalsApproximately,\n  equals,\n  lerp,\n  lerpV,\n  max,\n  min,\n  mulScalar,\n  scale,\n  divScalar,\n  inverse,\n  invert,\n  cross,\n  dot,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  distance,\n  dist,\n  distanceSq,\n  distSq,\n  normalize,\n  negate,\n  copy,\n  clone,\n  multiply,\n  mul,\n  divide,\n  div,\n  random,\n  zero,\n  transformMat4,\n  transformMat3,\n  rotate,\n  setLength,\n  truncate,\n  midpoint,\n};\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Vec2Arg = Float32Array>(Ctor: Vec2Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport { QuatArg } from './quat';\nimport { Mat3Arg, Mat3Type } from './mat3';\nimport { Mat4Arg } from './mat4';\nimport { Vec2Arg } from './vec2';\nimport { getAPI as getVec2API } from './vec2-impl';\nimport { BaseArgType } from './types';\n\nexport { Mat3Arg, Mat3Type };\n\ntype Mat3Ctor<T extends Mat3Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates a typed API for Mat3\n * */\nfunction getAPIImpl<MatType extends Mat3Arg = Float32Array>(Ctor: Mat3Ctor<MatType>) {\n  const vec2 = getVec2API<MatType>(Ctor);\n\n/**\n * Create a Mat3 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat3's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat3.clone(someJSArray);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @returns matrix created from values.\n */\nfunction create(\n    v0?: number, v1?: number, v2?: number,\n    v3?: number, v4?: number, v5?: number,\n    v6?: number, v7?: number, v8?: number) {\n  const newDst = new Ctor(12);\n  // to make the array homogenous\n  newDst[3] = 0;\n  newDst[7] = 0;\n  newDst[11] = 0;\n\n  if (v0 !== undefined) {\n    newDst[0] = v0;\n    if (v1 !== undefined) {\n      newDst[1] = v1;\n      if (v2 !== undefined) {\n        newDst[2] = v2;\n        if (v3 !== undefined) {\n          newDst[4] = v3;\n          if (v4 !== undefined) {\n            newDst[5] = v4;\n            if (v5 !== undefined) {\n              newDst[6] = v5;\n              if (v6 !== undefined) {\n                newDst[8] = v6;\n                if (v7 !== undefined) {\n                  newDst[9] = v7;\n                  if (v8 !== undefined) {\n                    newDst[10] = v8;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return newDst;\n}\n\n/**\n * Sets the values of a Mat3\n * Also see {@link mat3.create} and {@link mat3.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 set from values.\n */\nfunction set<T extends Mat3Arg = MatType>(\n    v0: number, v1: number, v2: number,\n    v3: number, v4: number, v5: number,\n    v6: number, v7: number, v8: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[0] = v0;  newDst[1] = v1;  newDst[ 2] = v2;  newDst[ 3] = 0;\n  newDst[4] = v3;  newDst[5] = v4;  newDst[ 6] = v5;  newDst[ 7] = 0;\n  newDst[8] = v6;  newDst[9] = v7;  newDst[10] = v8;  newDst[11] = 0;\n\n  return newDst;\n}\n\n/**\n * Creates a Mat3 from the upper left 3x3 part of a Mat4\n * @param m4 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from m4\n */\nfunction fromMat4<T extends Mat3Arg = MatType>(m4: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n  newDst[0] = m4[0];  newDst[1] = m4[1];  newDst[ 2] = m4[ 2];  newDst[ 3] = 0;\n  newDst[4] = m4[4];  newDst[5] = m4[5];  newDst[ 6] = m4[ 6];  newDst[ 7] = 0;\n  newDst[8] = m4[8];  newDst[9] = m4[9];  newDst[10] = m4[10];  newDst[11] = 0;\n  return newDst;\n}\n\n/**\n * Creates a Mat3 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from q\n */\nfunction fromQuat<T extends Mat3Arg = MatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const x = q[0]; const y = q[1]; const z = q[2]; const w = q[3];\n  const x2 = x + x; const y2 = y + y; const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  newDst[ 0] = 1 - yy - zz;  newDst[ 1] = yx + wz;      newDst[ 2] = zx - wy;      newDst[ 3] = 0;\n  newDst[ 4] = yx - wz;      newDst[ 5] = 1 - xx - zz;  newDst[ 6] = zy + wx;      newDst[ 7] = 0;\n  newDst[ 8] = zx + wy;      newDst[ 9] = zy - wx;      newDst[10] = 1 - xx - yy;  newDst[11] = 0;\n\n  return newDst;\n}\n\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nfunction negate<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = -m[ 0];  newDst[ 1] = -m[ 1];  newDst[ 2] = -m[ 2];\n  newDst[ 4] = -m[ 4];  newDst[ 5] = -m[ 5];  newDst[ 6] = -m[ 6];\n  newDst[ 8] = -m[ 8];  newDst[ 9] = -m[ 9];  newDst[10] = -m[10];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix. (same as {@link mat3.clone})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nfunction copy<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = m[ 0];  newDst[ 1] = m[ 1];  newDst[ 2] = m[ 2];\n  newDst[ 4] = m[ 4];  newDst[ 5] = m[ 5];  newDst[ 6] = m[ 6];\n  newDst[ 8] = m[ 8];  newDst[ 9] = m[ 9];  newDst[10] = m[10];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix (same as {@link mat3.copy})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nconst clone = copy;\n\n/**\n * Check if 2 matrices are approximately equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are approximately equal\n */\nfunction equalsApproximately(a: Mat3Arg, b: Mat3Arg): boolean {\n  return Math.abs(a[ 0] - b[ 0]) < utils.EPSILON &&\n         Math.abs(a[ 1] - b[ 1]) < utils.EPSILON &&\n         Math.abs(a[ 2] - b[ 2]) < utils.EPSILON &&\n         Math.abs(a[ 4] - b[ 4]) < utils.EPSILON &&\n         Math.abs(a[ 5] - b[ 5]) < utils.EPSILON &&\n         Math.abs(a[ 6] - b[ 6]) < utils.EPSILON &&\n         Math.abs(a[ 8] - b[ 8]) < utils.EPSILON &&\n         Math.abs(a[ 9] - b[ 9]) < utils.EPSILON &&\n         Math.abs(a[10] - b[10]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 matrices are exactly equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are exactly equal\n */\nfunction equals(a: Mat3Arg, b: Mat3Arg): boolean {\n  return a[ 0] === b[ 0] &&\n         a[ 1] === b[ 1] &&\n         a[ 2] === b[ 2] &&\n         a[ 4] === b[ 4] &&\n         a[ 5] === b[ 5] &&\n         a[ 6] === b[ 6] &&\n         a[ 8] === b[ 8] &&\n         a[ 9] === b[ 9] &&\n         a[10] === b[10];\n}\n\n/**\n * Creates a 3-by-3 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 3-by-3 identity matrix.\n */\nfunction identity<T extends Mat3Arg = MatType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = 1;  newDst[ 1] = 0;  newDst[ 2] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = 1;  newDst[ 6] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nfunction transpose<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n  if (newDst === m) {\n    let t: number;\n\n    // 0 1 2\n    // 4 5 6\n    // 8 9 10\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    return newDst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  newDst[ 0] = m00;  newDst[ 1] = m10;  newDst[ 2] = m20;\n  newDst[ 4] = m01;  newDst[ 5] = m11;  newDst[ 6] = m21;\n  newDst[ 8] = m02;  newDst[ 9] = m12;  newDst[10] = m22;\n\n  return newDst;\n}\n\n/**\n * Computes the inverse of a 3-by-3 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nfunction inverse<T extends Mat3Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  const b01 =  m22 * m11 - m12 * m21;\n  const b11 = -m22 * m10 + m12 * m20;\n  const b21 =  m21 * m10 - m11 * m20;\n\n  const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n\n  newDst[ 0] = b01 * invDet;\n  newDst[ 1] = (-m22 * m01 + m02 * m21) * invDet;\n  newDst[ 2] = ( m12 * m01 - m02 * m11) * invDet;\n  newDst[ 4] = b11 * invDet;\n  newDst[ 5] = ( m22 * m00 - m02 * m20) * invDet;\n  newDst[ 6] = (-m12 * m00 + m02 * m10) * invDet;\n  newDst[ 8] = b21 * invDet;\n  newDst[ 9] = (-m21 * m00 + m01 * m20) * invDet;\n  newDst[10] = ( m11 * m00 - m01 * m10) * invDet;\n\n  return newDst;\n}\n\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nfunction determinant(m: Mat3Arg): number {\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  return m00 * (m11 * m22 - m21 * m12) -\n         m10 * (m01 * m22 - m21 * m02) +\n         m20 * (m01 * m12 - m11 * m02);\n}\n\n/**\n * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nconst invert = inverse;\n\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nfunction multiply<T extends Mat3Arg = MatType>(a: Mat3Arg, b: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n\n  newDst[ 0] = a00 * b00 + a10 * b01 + a20 * b02;\n  newDst[ 1] = a01 * b00 + a11 * b01 + a21 * b02;\n  newDst[ 2] = a02 * b00 + a12 * b01 + a22 * b02;\n  newDst[ 4] = a00 * b10 + a10 * b11 + a20 * b12;\n  newDst[ 5] = a01 * b10 + a11 * b11 + a21 * b12;\n  newDst[ 6] = a02 * b10 + a12 * b11 + a22 * b12;\n  newDst[ 8] = a00 * b20 + a10 * b21 + a20 * b22;\n  newDst[ 9] = a01 * b20 + a11 * b21 + a21 * b22;\n  newDst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n\n  return newDst;\n}\n\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nconst mul = multiply;\n\n/**\n * Sets the translation component of a 3-by-3 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nfunction setTranslation<T extends Mat3Arg = MatType>(a: Mat3Arg, v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? identity()) as T;\n  if (a !== newDst) {\n    newDst[ 0] = a[ 0];\n    newDst[ 1] = a[ 1];\n    newDst[ 2] = a[ 2];\n    newDst[ 4] = a[ 4];\n    newDst[ 5] = a[ 5];\n    newDst[ 6] = a[ 6];\n  }\n  newDst[ 8] = v[0];\n  newDst[ 9] = v[1];\n  newDst[10] = 1;\n  return newDst;\n}\n\n/**\n * Returns the translation component of a 3-by-3 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation<T extends Vec2Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? vec2.create()) as T;\n  newDst[0] = m[8];\n  newDst[1] = m[9];\n  return newDst;\n}\n\n/**\n * Returns an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y,\n * @returns The axis component of m.\n */\nfunction getAxis<T extends Vec2Arg = MatType>(m: Mat3Arg, axis: number, dst?: T) {\n  const newDst = (dst ?? vec2.create()) as T;\n  const off = axis * 4;\n  newDst[0] = m[off + 0];\n  newDst[1] = m[off + 1];\n  return newDst;\n}\n\n/**\n * Sets an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nfunction setAxis<T extends Mat3Arg = MatType>(m: Mat3Arg, v: Vec2Arg, axis: number, dst?: T) {\n  const newDst = (dst === m ? m : copy(m, dst)) as T;\n\n  const off = axis * 4;\n  newDst[off + 0] = v[0];\n  newDst[off + 1] = v[1];\n  return newDst;\n}\n\n///**\n// * Returns the scaling component of the matrix\n// * @param m - The Matrix\n// * @param dst - The vector to set. If not passed a new one is created.\n// */\nfunction getScaling<T extends Vec2Arg = MatType>(m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? vec2.create());\n\n  const xx = m[0];\n  const xy = m[1];\n  const yx = m[4];\n  const yy = m[5];\n\n  newDst[0] = Math.sqrt(xx * xx + xy * xy);\n  newDst[1] = Math.sqrt(yx * yx + yy * yy);\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which translates by the given vector v.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nfunction translation<T extends Mat3Arg = MatType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = 1;     newDst[ 1] = 0;     newDst[ 2] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = 1;     newDst[ 6] = 0;\n  newDst[ 8] = v[0];  newDst[ 9] = v[1];  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Translates the given 3-by-3 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nfunction translate<T extends Mat3Arg = MatType>(m: Mat3Arg, v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  if (m !== newDst) {\n    newDst[ 0] = m00;\n    newDst[ 1] = m01;\n    newDst[ 2] = m02;\n    newDst[ 4] = m10;\n    newDst[ 5] = m11;\n    newDst[ 6] = m12;\n  }\n\n  newDst[ 8] = m00 * v0 + m10 * v1 + m20;\n  newDst[ 9] = m01 * v0 + m11 * v1 + m21;\n  newDst[10] = m02 * v0 + m12 * v1 + m22;\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which rotates  by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotation<T extends Mat3Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] =  c;  newDst[ 1] = s;  newDst[ 2] = 0;\n  newDst[ 4] = -s;  newDst[ 5] = c;  newDst[ 6] = 0;\n  newDst[ 8] =  0;  newDst[ 9] = 0;  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 3-by-3 matrix  by the given angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotate<T extends Mat3Arg = MatType>(m: Mat3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c * m00 + s * m10;\n  newDst[ 1] = c * m01 + s * m11;\n  newDst[ 2] = c * m02 + s * m12;\n\n  newDst[ 4] = c * m10 - s * m00;\n  newDst[ 5] = c * m11 - s * m01;\n  newDst[ 6] = c * m12 - s * m02;\n\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     2 entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction scaling<T extends Mat3Arg = MatType>(v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = v[0];  newDst[ 1] = 0;     newDst[ 2] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = v[1];  newDst[ 6] = 0;\n  newDst[ 8] = 0;     newDst[ 9] = 0;     newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of 2 entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction scale<T extends Mat3Arg = MatType>(m: Mat3Arg, v: Vec2Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n\n  newDst[ 0] = v0 * m[0 * 4 + 0];\n  newDst[ 1] = v0 * m[0 * 4 + 1];\n  newDst[ 2] = v0 * m[0 * 4 + 2];\n\n  newDst[ 4] = v1 * m[1 * 4 + 0];\n  newDst[ 5] = v1 * m[1 * 4 + 1];\n  newDst[ 6] = v1 * m[1 * 4 + 2];\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 3-by-3 matrix which scales uniformly in each dimension\n * @param s - Amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction uniformScaling<T extends Mat3Arg = MatType>(s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = s;  newDst[ 1] = 0;  newDst[ 2] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = s;  newDst[ 6] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given.\n * @param m - The matrix to be modified.\n * @param s - Amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction uniformScale<T extends Mat3Arg = MatType>(m: Mat3Arg, s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(12)) as T;\n\n  newDst[ 0] = s * m[0 * 4 + 0];\n  newDst[ 1] = s * m[0 * 4 + 1];\n  newDst[ 2] = s * m[0 * 4 + 2];\n\n  newDst[ 4] = s * m[1 * 4 + 0];\n  newDst[ 5] = s * m[1 * 4 + 1];\n  newDst[ 6] = s * m[1 * 4 + 2];\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n  }\n\n  return newDst;\n}\n\nreturn {\n  clone,\n  create,\n  set,\n  fromMat4,\n  fromQuat,\n  negate,\n  copy,\n  equalsApproximately,\n  equals,\n  identity,\n  transpose,\n  inverse,\n  invert,\n  determinant,\n  mul,\n  multiply,\n  setTranslation,\n  getTranslation,\n  getAxis,\n  setAxis,\n  getScaling,\n  translation,\n  translate,\n  rotation,\n  rotate,\n  scaling,\n  scale,\n  uniformScaling,\n  uniformScale,\n};\n\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Mat3Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Vec3Arg, Vec3Type } from './vec3';\nimport { Mat3Arg } from './mat3';\nimport { Mat4Arg } from './mat4';\nimport { QuatArg } from './quat';\nimport { BaseArgType } from './types';\n\nexport { Vec3Arg, Vec3Type };\n\ntype Vec3Ctor<T extends Vec3Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates am typed API for Vec3\n * */\nfunction getAPIImpl<VecType extends Vec3Arg = Float32Array>(Ctor: Vec3Ctor<VecType>) {\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nfunction create(x?: number, y?: number, z?: number) {\n  const newDst = new Ctor(3);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n      if (z !== undefined) {\n        newDst[2] = z;\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Vec3\n * Also see {@link vec3.create} and {@link vec3.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends Vec3Arg = VecType>(x: number, y: number, z: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n  newDst[2] = z;\n\n  return newDst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.ceil(v[0]);\n  newDst[1] = Math.ceil(v[1]);\n  newDst[2] = Math.ceil(v[2]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.floor(v[0]);\n  newDst[1] = Math.floor(v[1]);\n  newDst[2] = Math.floor(v[2]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.round(v[0]);\n  newDst[1] = Math.round(v[1]);\n  newDst[2] = Math.round(v[2]);\n\n  return newDst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp<T extends Vec3Arg = VecType>(v: Vec3Arg, min = 0, max = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.min(max, Math.max(min, v[0]));\n  newDst[1] = Math.min(max, Math.max(min, v[1]));\n  newDst[2] = Math.min(max, Math.max(min, v[2]));\n\n  return newDst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n  newDst[2] = a[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, scale: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + b[0] * scale;\n  newDst[1] = a[1] + b[1] * scale;\n  newDst[2] = a[2] + b[2] * scale;\n\n  return newDst;\n}\n\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nfunction angle(a: Vec3Arg, b: Vec3Arg): number {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n  const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n  const mag = mag1 * mag2;\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(cosine);\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n  newDst[2] = a[2] - b[2];\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a: Vec3Arg, b: Vec3Arg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a: Vec3Arg, b: Vec3Arg): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n  newDst[2] = a[2] + t * (b[2] - a[2]);\n\n  return newDst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, t: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n  newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n  newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return newDst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.max(a[0], b[0]);\n  newDst[1] = Math.max(a[1], b[1]);\n  newDst[2] = Math.max(a[2], b[2]);\n\n  return newDst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = Math.min(a[0], b[0]);\n  newDst[1] = Math.min(a[1], b[1]);\n  newDst[2] = Math.min(a[2], b[2]);\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar<T extends Vec3Arg = VecType>(v: Vec3Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n  newDst[2] = v[2] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar<T extends Vec3Arg = VecType>(v: Vec3Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n  newDst[2] = v[2] / k;\n\n  return newDst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = 1 / v[0];\n  newDst[1] = 1 / v[1];\n  newDst[2] = 1 / v[2];\n\n  return newDst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nfunction cross<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  newDst[0] = a[1] * b[2] - a[2] * b[1];\n  newDst[1] = t1;\n  newDst[2] = t2;\n\n  return newDst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a: Vec3Arg, b: Vec3Arg): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v: Vec3Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v: Vec3Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  return v0 * v0 + v1 * v1 + v2 * v2;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a: Vec3Arg, b: Vec3Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a: Vec3Arg, b: Vec3Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n    newDst[2] = v2 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n  }\n\n\n  return newDst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = -v[0];\n  newDst[1] = -v[1];\n  newDst[2] = -v[2];\n\n  return newDst;\n}\n\n/**\n * Copies a vector. (same as {@link vec3.clone})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy<T extends Vec3Arg = VecType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = v[0];\n  newDst[1] = v[1];\n  newDst[2] = v[2];\n\n  return newDst;\n}\n\n/**\n * Clones a vector. (same as {@link vec3.copy})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] * b[0];\n  newDst[1] = a[1] * b[1];\n  newDst[2] = a[2] * b[2];\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = a[0] / b[0];\n  newDst[1] = a[1] / b[1];\n  newDst[2] = a[2] / b[2];\n\n  return newDst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n\n/**\n * Creates a random vector\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nfunction random<T extends Vec3Arg = VecType>(scale = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const angle = Math.random() * 2 * Math.PI;\n  const z = Math.random() * 2 - 1;\n  const zScale = Math.sqrt(1 - z * z) * scale;\n  newDst[0] = Math.cos(angle) * zScale;\n  newDst[1] = Math.sin(angle) * zScale;\n  newDst[2] = z * scale;\n\n  return newDst;\n}\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero<T extends Vec3Arg = VecType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = 0;\n\n  return newDst;\n}\n\n\n/**\n * transform vec3 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4<T extends Vec3Arg = VecType>(v: Vec3Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n\n  newDst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  newDst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  newDst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n\n  return newDst;\n}\n\n/**\n * Transform vec3 by upper 3x3 matrix inside 4x4 matrix.\n * @param v - The direction.\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns The transformed vector.\n */\nfunction transformMat4Upper3x3<T extends Vec3Arg = VecType>(v: Vec3Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  newDst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  newDst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  newDst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return newDst;\n}\n\n/**\n * Transforms vec3 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat3<T extends Vec3Arg = VecType>(v: Vec3Arg, m: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  newDst[0] = x * m[0] + y * m[4] + z * m[8];\n  newDst[1] = x * m[1] + y * m[5] + z * m[9];\n  newDst[2] = x * m[2] + y * m[6] + z * m[10];\n\n  return newDst;\n}\n\n/**\n * Transforms vec3 by Quaternion\n * @param v - the vector to transform\n * @param q - the quaternion to transform by\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed\n */\nfunction transformQuat<T extends Vec3Arg = VecType>(v: Vec3Arg, q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const w2 = q[3] * 2;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  const uvX = qy * z - qz * y;\n  const uvY = qz * x - qx * z;\n  const uvZ = qx * y - qy * x;\n\n  newDst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n  newDst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n  newDst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n\n  return newDst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation<T extends Vec3Arg = VecType>(m: Mat3Arg, dst?: T) {\n    const newDst = (dst ?? new Ctor(3)) as T;\n    newDst[0] = m[12];\n    newDst[1] = m[13];\n    newDst[2] = m[14];\n    return newDst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nfunction getAxis<T extends Vec3Arg = VecType>(m: Mat4Arg, axis: number, dst?: T) {\n    const newDst = (dst ?? new Ctor(3)) as T;\n    const off = axis * 4;\n    newDst[0] = m[off + 0];\n    newDst[1] = m[off + 1];\n    newDst[2] = m[off + 2];\n    return newDst;\n}\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction getScaling<T extends Vec3Arg = VecType>(m: Mat4Arg, dst?: T) {\n    const newDst = (dst ?? new Ctor(3)) as T;\n    const xx = m[0];\n    const xy = m[1];\n    const xz = m[2];\n    const yx = m[4];\n    const yy = m[5];\n    const yz = m[6];\n    const zx = m[8];\n    const zy = m[9];\n    const zz = m[10];\n    newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n    newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n    newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n    return newDst;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns the rotated vector\n */\nfunction rotateX<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const p = [];\n  const r = [];\n\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  //translate to correct position\n  newDst[0] = r[0] + b[0];\n  newDst[1] = r[1] + b[1];\n  newDst[2] = r[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns the rotated vector\n */\nfunction rotateY<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const p = [];\n  const r = [];\n\n  // translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  // translate to correct position\n  newDst[0] = r[0] + b[0];\n  newDst[1] = r[1] + b[1];\n  newDst[2] = r[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns {vec3} out\n */\nfunction rotateZ<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, rad: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  const p = [];\n  const r = [];\n\n  // translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  // translate to correct position\n  newDst[0] = r[0] + b[0];\n  newDst[1] = r[1] + b[1];\n  newDst[2] = r[2] + b[2];\n\n  return newDst;\n}\n\n/**\n * Treat a 3D vector as a direction and set it's length\n *\n * @param a The vec3 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nfunction setLength<T extends Vec3Arg = VecType>(a: Vec3Arg, len: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  normalize(a, newDst);\n  return mulScalar(newDst, len, newDst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec3 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nfunction truncate<T extends Vec3Arg = VecType>(a: Vec3Arg, maxLen: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, newDst);\n  }\n\n  return copy(a, newDst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nfunction midpoint<T extends Vec3Arg = VecType>(a: Vec3Arg, b: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(3)) as T;\n  return lerp(a, b, 0.5, newDst);\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  ceil,\n  floor,\n  round,\n  clamp,\n  add,\n  addScaled,\n  angle,\n  subtract,\n  sub,\n  equalsApproximately,\n  equals,\n  lerp,\n  lerpV,\n  max,\n  min,\n  mulScalar,\n  scale,\n  divScalar,\n  inverse,\n  invert,\n  cross,\n  dot,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  distance,\n  dist,\n  distanceSq,\n  distSq,\n  normalize,\n  negate,\n  copy,\n  clone,\n  multiply,\n  mul,\n  divide,\n  div,\n  random,\n  zero,\n  transformMat4,\n  transformMat4Upper3x3,\n  transformMat3,\n  transformQuat,\n  getTranslation,\n  getAxis,\n  getScaling,\n  rotateX,\n  rotateY,\n  rotateZ,\n  setLength,\n  truncate,\n  midpoint,\n};\n\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Vec3Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n", "import { Mat4Arg, Mat4Type } from './mat4';\nimport { Mat3Arg } from './mat3';\nimport { QuatArg } from './quat';\nimport { Vec3Arg } from './vec3';\nimport { getAPI as getVec3API } from './vec3-impl';\nimport { BaseArgType } from './types';\nimport * as utils from './utils';\n\nexport { Mat4Arg, Mat4Type };\n\ntype Mat4Ctor<T extends Mat4Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates a typed API for Mat4\n * */\nfunction getAPIImpl<MatType extends Mat4Arg = Float32Array>(Ctor: Mat4Ctor<MatType>) {\n  const vec3 = getVec3API<MatType>(Ctor);\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat4.create();\n *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat4.identity();\n *     const trans = mat4.translation([1, 2, 3]);\n *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\n\n\n/**\n * Create a Mat4 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat4's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat4.clone(someJSArray);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @returns created from values.\n */\nfunction create(\n    v0?: number, v1?: number, v2?: number, v3?: number,\n    v4?: number, v5?: number, v6?: number, v7?: number,\n    v8?: number, v9?: number, v10?: number, v11?: number,\n    v12?: number, v13?: number, v14?: number, v15?: number) {\n  const newDst = new Ctor(16);\n  if (v0 !== undefined) {\n    newDst[0] = v0;\n    if (v1 !== undefined) {\n      newDst[1] = v1;\n      if (v2 !== undefined) {\n        newDst[2] = v2;\n        if (v3 !== undefined) {\n          newDst[3] = v3;\n          if (v4 !== undefined) {\n            newDst[4] = v4;\n            if (v5 !== undefined) {\n              newDst[5] = v5;\n              if (v6 !== undefined) {\n                newDst[6] = v6;\n                if (v7 !== undefined) {\n                  newDst[7] = v7;\n                  if (v8 !== undefined) {\n                    newDst[8] = v8;\n                    if (v9 !== undefined) {\n                      newDst[9] = v9;\n                      if (v10 !== undefined) {\n                        newDst[10] = v10;\n                        if (v11 !== undefined) {\n                          newDst[11] = v11;\n                          if (v12 !== undefined) {\n                            newDst[12] = v12;\n                            if (v13 !== undefined) {\n                              newDst[13] = v13;\n                              if (v14 !== undefined) {\n                                newDst[14] = v14;\n                                if (v15 !== undefined) {\n                                  newDst[15] = v15;\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Sets the values of a Mat4\n * Also see {@link mat4.create} and {@link mat4.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 created from values.\n */\nfunction set<T extends Mat4Arg = MatType>(\n    v0: number, v1: number, v2: number, v3: number,\n    v4: number, v5: number, v6: number, v7: number,\n    v8: number, v9: number, v10: number, v11: number,\n    v12: number, v13: number, v14: number, v15: number,\n    dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = v0;   newDst[ 1] = v1;   newDst[ 2] = v2;   newDst[ 3] = v3;\n  newDst[ 4] = v4;   newDst[ 5] = v5;   newDst[ 6] = v6;   newDst[ 7] = v7;\n  newDst[ 8] = v8;   newDst[ 9] = v9;   newDst[10] = v10;  newDst[11] = v11;\n  newDst[12] = v12;  newDst[13] = v13;  newDst[14] = v14;  newDst[15] = v15;\n\n  return newDst;\n}\n\n/**\n * Creates a Mat4 from a Mat3\n * @param m3 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from m3\n */\nfunction fromMat3<T extends Mat4Arg = MatType>(m3: Mat3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = m3[0];  newDst[ 1] = m3[1];  newDst[ 2] = m3[ 2];  newDst[ 3] = 0;\n  newDst[ 4] = m3[4];  newDst[ 5] = m3[5];  newDst[ 6] = m3[ 6];  newDst[ 7] = 0;\n  newDst[ 8] = m3[8];  newDst[ 9] = m3[9];  newDst[10] = m3[10];  newDst[11] = 0;\n  newDst[12] = 0;      newDst[13] = 0;      newDst[14] = 0;       newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Creates a Mat4 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from q\n */\nfunction fromQuat<T extends Mat4Arg = MatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const x = q[0]; const y = q[1]; const z = q[2]; const w = q[3];\n  const x2 = x + x; const y2 = y + y; const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  newDst[ 0] = 1 - yy - zz;  newDst[ 1] = yx + wz;      newDst[ 2] = zx - wy;      newDst[ 3] = 0;\n  newDst[ 4] = yx - wz;      newDst[ 5] = 1 - xx - zz;  newDst[ 6] = zy + wx;      newDst[ 7] = 0;\n  newDst[ 8] = zx + wy;      newDst[ 9] = zy - wx;      newDst[10] = 1 - xx - yy;  newDst[11] = 0;\n  newDst[12] = 0;            newDst[13] = 0;            newDst[14] = 0;            newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nfunction negate<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = -m[ 0];  newDst[ 1] = -m[ 1];  newDst[ 2] = -m[ 2];  newDst[ 3] = -m[ 3];\n  newDst[ 4] = -m[ 4];  newDst[ 5] = -m[ 5];  newDst[ 6] = -m[ 6];  newDst[ 7] = -m[ 7];\n  newDst[ 8] = -m[ 8];  newDst[ 9] = -m[ 9];  newDst[10] = -m[10];  newDst[11] = -m[11];\n  newDst[12] = -m[12];  newDst[13] = -m[13];  newDst[14] = -m[14];  newDst[15] = -m[15];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix. (same as {@link mat4.clone})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nfunction copy<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = m[ 0];  newDst[ 1] = m[ 1];  newDst[ 2] = m[ 2];  newDst[ 3] = m[ 3];\n  newDst[ 4] = m[ 4];  newDst[ 5] = m[ 5];  newDst[ 6] = m[ 6];  newDst[ 7] = m[ 7];\n  newDst[ 8] = m[ 8];  newDst[ 9] = m[ 9];  newDst[10] = m[10];  newDst[11] = m[11];\n  newDst[12] = m[12];  newDst[13] = m[13];  newDst[14] = m[14];  newDst[15] = m[15];\n\n  return newDst;\n}\n\n/**\n * Copies a matrix (same as {@link mat4.copy})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nconst clone = copy;\n\n/**\n * Check if 2 matrices are approximately equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are approximately equal\n */\nfunction equalsApproximately(a: Mat4Arg, b: Mat4Arg): boolean {\n  return Math.abs(a[ 0] - b[ 0]) < utils.EPSILON &&\n         Math.abs(a[ 1] - b[ 1]) < utils.EPSILON &&\n         Math.abs(a[ 2] - b[ 2]) < utils.EPSILON &&\n         Math.abs(a[ 3] - b[ 3]) < utils.EPSILON &&\n         Math.abs(a[ 4] - b[ 4]) < utils.EPSILON &&\n         Math.abs(a[ 5] - b[ 5]) < utils.EPSILON &&\n         Math.abs(a[ 6] - b[ 6]) < utils.EPSILON &&\n         Math.abs(a[ 7] - b[ 7]) < utils.EPSILON &&\n         Math.abs(a[ 8] - b[ 8]) < utils.EPSILON &&\n         Math.abs(a[ 9] - b[ 9]) < utils.EPSILON &&\n         Math.abs(a[10] - b[10]) < utils.EPSILON &&\n         Math.abs(a[11] - b[11]) < utils.EPSILON &&\n         Math.abs(a[12] - b[12]) < utils.EPSILON &&\n         Math.abs(a[13] - b[13]) < utils.EPSILON &&\n         Math.abs(a[14] - b[14]) < utils.EPSILON &&\n         Math.abs(a[15] - b[15]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 matrices are exactly equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are exactly equal\n */\nfunction equals(a: Mat4Arg, b: Mat4Arg): boolean {\n  return a[ 0] === b[ 0] &&\n         a[ 1] === b[ 1] &&\n         a[ 2] === b[ 2] &&\n         a[ 3] === b[ 3] &&\n         a[ 4] === b[ 4] &&\n         a[ 5] === b[ 5] &&\n         a[ 6] === b[ 6] &&\n         a[ 7] === b[ 7] &&\n         a[ 8] === b[ 8] &&\n         a[ 9] === b[ 9] &&\n         a[10] === b[10] &&\n         a[11] === b[11] &&\n         a[12] === b[12] &&\n         a[13] === b[13] &&\n         a[14] === b[14] &&\n         a[15] === b[15];\n}\n\n/**\n * Creates a 4-by-4 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 4-by-4 identity matrix.\n */\nfunction identity<T extends Mat4Arg = MatType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = 1;  newDst[ 1] = 0;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = 1;  newDst[ 6] = 0;  newDst[ 7] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = 1;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] = 0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nfunction transpose<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n  if (newDst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return newDst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  newDst[ 0] = m00;  newDst[ 1] = m10;  newDst[ 2] = m20;  newDst[ 3] = m30;\n  newDst[ 4] = m01;  newDst[ 5] = m11;  newDst[ 6] = m21;  newDst[ 7] = m31;\n  newDst[ 8] = m02;  newDst[ 9] = m12;  newDst[10] = m22;  newDst[11] = m32;\n  newDst[12] = m03;  newDst[13] = m13;  newDst[14] = m23;  newDst[15] = m33;\n\n  return newDst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nfunction inverse<T extends Mat4Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp0  = m22 * m33;\n  const tmp1  = m32 * m23;\n  const tmp2  = m12 * m33;\n  const tmp3  = m32 * m13;\n  const tmp4  = m12 * m23;\n  const tmp5  = m22 * m13;\n  const tmp6  = m02 * m33;\n  const tmp7  = m32 * m03;\n  const tmp8  = m02 * m23;\n  const tmp9  = m22 * m03;\n  const tmp10 = m02 * m13;\n  const tmp11 = m12 * m03;\n  const tmp12 = m20 * m31;\n  const tmp13 = m30 * m21;\n  const tmp14 = m10 * m31;\n  const tmp15 = m30 * m11;\n  const tmp16 = m10 * m21;\n  const tmp17 = m20 * m11;\n  const tmp18 = m00 * m31;\n  const tmp19 = m30 * m01;\n  const tmp20 = m00 * m21;\n  const tmp21 = m20 * m01;\n  const tmp22 = m00 * m11;\n  const tmp23 = m10 * m01;\n\n  const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n      (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n  const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n      (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n  const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n      (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n  const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n      (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n  const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  newDst[ 0] = d * t0;\n  newDst[ 1] = d * t1;\n  newDst[ 2] = d * t2;\n  newDst[ 3] = d * t3;\n  newDst[ 4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n          (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n  newDst[ 5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n          (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n  newDst[ 6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n          (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n  newDst[ 7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n          (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n  newDst[ 8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n          (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n  newDst[ 9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n          (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n  newDst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n          (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n  newDst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n          (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n  newDst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n          (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n  newDst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n          (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n  newDst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n          (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n  newDst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n          (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n\n  return newDst;\n}\n\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nfunction determinant(m: Mat4Arg): number {\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  const tmp0  = m22 * m33;\n  const tmp1  = m32 * m23;\n  const tmp2  = m12 * m33;\n  const tmp3  = m32 * m13;\n  const tmp4  = m12 * m23;\n  const tmp5  = m22 * m13;\n  const tmp6  = m02 * m33;\n  const tmp7  = m32 * m03;\n  const tmp8  = m02 * m23;\n  const tmp9  = m22 * m03;\n  const tmp10 = m02 * m13;\n  const tmp11 = m12 * m03;\n\n  const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n             (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n  const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n             (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n  const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n             (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n  const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n             (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n  return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nconst invert = inverse;\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nfunction multiply<T extends Mat4Arg = MatType>(a: Mat4Arg, b: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  newDst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  newDst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  newDst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  newDst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  newDst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  newDst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  newDst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  newDst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  newDst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  newDst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  newDst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  newDst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  newDst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  newDst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  newDst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  newDst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return newDst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nconst mul = multiply;\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nfunction setTranslation<T extends Mat4Arg = MatType>(a: Mat4Arg, v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? identity()) as T;\n  if (a !== newDst) {\n    newDst[ 0] = a[ 0];\n    newDst[ 1] = a[ 1];\n    newDst[ 2] = a[ 2];\n    newDst[ 3] = a[ 3];\n    newDst[ 4] = a[ 4];\n    newDst[ 5] = a[ 5];\n    newDst[ 6] = a[ 6];\n    newDst[ 7] = a[ 7];\n    newDst[ 8] = a[ 8];\n    newDst[ 9] = a[ 9];\n    newDst[10] = a[10];\n    newDst[11] = a[11];\n  }\n  newDst[12] = v[0];\n  newDst[13] = v[1];\n  newDst[14] = v[2];\n  newDst[15] = 1;\n  return newDst;\n}\n\n///**\n// * Returns the translation component of a 4-by-4 matrix as a vector with 3\n// * entries.\n// * @param m - The matrix.\n// * @param dst - vector to hold result. If not passed a new one is created.\n// * @returns The translation component of m.\n// */\nfunction getTranslation<T extends Vec3Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? vec3.create()) as T;\n  newDst[0] = m[12];\n  newDst[1] = m[13];\n  newDst[2] = m[14];\n  return newDst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nfunction getAxis<T extends Vec3Arg = MatType>(m: Mat4Arg, axis: number, dst?: T) {\n  const newDst = (dst ?? vec3.create());\n  const off = axis * 4;\n  newDst[0] = m[off + 0];\n  newDst[1] = m[off + 1];\n  newDst[2] = m[off + 2];\n  return newDst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y, 2 = z;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nfunction setAxis<T extends Mat4Arg = MatType>(m: Mat4Arg, v: Vec3Arg, axis: number, dst: T) {\n  const newDst = (dst === m) ? dst : copy(m, dst);\n\n  const off = axis * 4;\n  newDst[off + 0] = v[0];\n  newDst[off + 1] = v[1];\n  newDst[off + 2] = v[2];\n  return newDst;\n}\n\n///**\n// * Returns the scaling component of the matrix\n// * @param m - The Matrix\n// * @param dst - The vector to set. If not passed a new one is created.\n// */\nfunction getScaling<T extends Vec3Arg = MatType>(m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? vec3.create()) as T;\n\n  const xx = m[0];\n  const xy = m[1];\n  const xz = m[2];\n  const yx = m[4];\n  const yy = m[5];\n  const yz = m[6];\n  const zx = m[8];\n  const zy = m[9];\n  const zz = m[10];\n\n  newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n  newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n  newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n *\n * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n * otherwise.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */\nfunction perspective<T extends Mat4Arg = MatType>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n\n  newDst[0]  = f / aspect;\n  newDst[1]  = 0;\n  newDst[2]  = 0;\n  newDst[3]  = 0;\n\n  newDst[4]  = 0;\n  newDst[5]  = f;\n  newDst[6]  = 0;\n  newDst[7]  = 0;\n\n  newDst[8]  = 0;\n  newDst[9]  = 0;\n  newDst[11] = -1;\n\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[15] = 0;\n\n  if (Number.isFinite(zFar)) {\n    const rangeInv = 1 / (zNear - zFar);\n    newDst[10] = zFar * rangeInv;\n    newDst[14] = zFar * zNear * rangeInv;\n  } else {\n    newDst[10] = -1;\n    newDst[14] = -zNear;\n  }\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane. (default = Infinity)\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */function perspectiveReverseZ<T extends Mat4Arg = MatType>(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar = Infinity, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n\n  newDst[ 0] = f / aspect;\n  newDst[ 1] = 0;\n  newDst[ 2] = 0;\n  newDst[ 3] = 0;\n\n  newDst[ 4] = 0;\n  newDst[ 5] = f;\n  newDst[ 6] = 0;\n  newDst[ 7] = 0;\n\n  newDst[ 8] = 0;\n  newDst[ 9] = 0;\n  newDst[11] = -1;\n\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[15] = 0;\n\n  if (zFar === Infinity) {\n    newDst[10] = 0;\n    newDst[14] = zNear;\n  } else {\n    const rangeInv = 1 / (zFar - zNear);\n    newDst[10] = zNear * rangeInv;\n    newDst[14] = zFar * zNear * rangeInv;\n  }\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n * and 0 to +1 in z.\n * @param left - Left side of the near clipping plane viewport.\n * @param right - Right side of the near clipping plane viewport.\n * @param bottom - Bottom of the near clipping plane viewport.\n * @param top - Top of the near clipping plane viewport.\n * @param near - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param far - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The orthographic projection matrix.\n */\nfunction ortho<T extends Mat4Arg = MatType>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[0]  = 2 / (right - left);\n  newDst[1]  = 0;\n  newDst[2]  = 0;\n  newDst[3]  = 0;\n\n  newDst[4]  = 0;\n  newDst[5]  = 2 / (top - bottom);\n  newDst[6]  = 0;\n  newDst[7]  = 0;\n\n  newDst[8]  = 0;\n  newDst[9]  = 0;\n  newDst[10] = 1 / (near - far);\n  newDst[11] = 0;\n\n  newDst[12] = (right + left) / (left - right);\n  newDst[13] = (top + bottom) / (bottom - top);\n  newDst[14] = near / (near - far);\n  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nfunction frustum<T extends Mat4Arg = MatType>(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  newDst[ 0] = 2 * near / dx;\n  newDst[ 1] = 0;\n  newDst[ 2] = 0;\n  newDst[ 3] = 0;\n  newDst[ 4] = 0;\n  newDst[ 5] = 2 * near / dy;\n  newDst[ 6] = 0;\n  newDst[ 7] = 0;\n  newDst[ 8] = (left + right) / dx;\n  newDst[ 9] = (top + bottom) / dy;\n  newDst[10] = far / dz;\n  newDst[11] = -1;\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[14] = near * far / dz;\n  newDst[15] = 0;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nfunction frustumReverseZ<T extends Mat4Arg = MatType>(left: number, right: number, bottom: number, top: number, near: number, far = Infinity, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n\n  newDst[ 0] = 2 * near / dx;\n  newDst[ 1] = 0;\n  newDst[ 2] = 0;\n  newDst[ 3] = 0;\n  newDst[ 4] = 0;\n  newDst[ 5] = 2 * near / dy;\n  newDst[ 6] = 0;\n  newDst[ 7] = 0;\n  newDst[ 8] = (left + right) / dx;\n  newDst[ 9] = (top + bottom) / dy;\n  newDst[11] = -1;\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[15] = 0;\n\n  if (far === Infinity) {\n    newDst[10] = 0;\n    newDst[14] = near;\n  } else {\n    const rangeInv = 1 / (far - near);\n    newDst[10] = near * rangeInv;\n    newDst[14] = far * near * rangeInv;\n  }\n\n  return newDst;\n}\n\nconst xAxis = vec3.create();\nconst yAxis = vec3.create();\nconst zAxis = vec3.create();\n\n/**\n * Computes a 4-by-4 aim transformation.\n *\n * This is a matrix which positions an object aiming down positive Z.\n * toward the target.\n *\n * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n *\n * @param position - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nfunction aim<T extends Mat4Arg = MatType>(position: Vec3Arg, target: Vec3Arg, up: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  newDst[ 0] = xAxis[0];     newDst[ 1] = xAxis[1];     newDst[ 2] = xAxis[2];     newDst[ 3] = 0;\n  newDst[ 4] = yAxis[0];     newDst[ 5] = yAxis[1];     newDst[ 6] = yAxis[2];     newDst[ 7] = 0;\n  newDst[ 8] = zAxis[0];     newDst[ 9] = zAxis[1];     newDst[10] = zAxis[2];     newDst[11] = 0;\n  newDst[12] = position[0];  newDst[13] = position[1];  newDst[14] = position[2];  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 camera aim transformation.\n *\n * This is a matrix which positions an object aiming down negative Z.\n * toward the target.\n *\n * Note: this is the inverse of `lookAt`\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nfunction cameraAim<T extends Mat4Arg = MatType>(eye: Vec3Arg, target: Vec3Arg, up: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  newDst[ 0] = xAxis[0];     newDst[ 1] = xAxis[1];     newDst[ 2] = xAxis[2];     newDst[ 3] = 0;\n  newDst[ 4] = yAxis[0];     newDst[ 5] = yAxis[1];     newDst[ 6] = yAxis[2];     newDst[ 7] = 0;\n  newDst[ 8] = zAxis[0];     newDst[ 9] = zAxis[1];     newDst[10] = zAxis[2];     newDst[11] = 0;\n  newDst[12] = eye[0];  newDst[13] = eye[1];  newDst[14] = eye[2];  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Computes a 4-by-4 view transformation.\n *\n * This is a view matrix which transforms all other objects\n * to be in the space of the view defined by the parameters.\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The look-at matrix.\n */\nfunction lookAt<T extends Mat4Arg = MatType>(eye: Vec3Arg, target: Vec3Arg, up: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  newDst[ 0] = xAxis[0];  newDst[ 1] = yAxis[0];  newDst[ 2] = zAxis[0];  newDst[ 3] = 0;\n  newDst[ 4] = xAxis[1];  newDst[ 5] = yAxis[1];  newDst[ 6] = zAxis[1];  newDst[ 7] = 0;\n  newDst[ 8] = xAxis[2];  newDst[ 9] = yAxis[2];  newDst[10] = zAxis[2];  newDst[11] = 0;\n\n  newDst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n  newDst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n  newDst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nfunction translation<T extends Mat4Arg = MatType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = 1;     newDst[ 1] = 0;     newDst[ 2] = 0;     newDst[ 3] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = 1;     newDst[ 6] = 0;     newDst[ 7] = 0;\n  newDst[ 8] = 0;     newDst[ 9] = 0;     newDst[10] = 1;     newDst[11] = 0;\n  newDst[12] = v[0];  newDst[13] = v[1];  newDst[14] = v[2];  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nfunction translate<T extends Mat4Arg = MatType>(m: Mat4Arg, v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== newDst) {\n    newDst[ 0] = m00;\n    newDst[ 1] = m01;\n    newDst[ 2] = m02;\n    newDst[ 3] = m03;\n    newDst[ 4] = m10;\n    newDst[ 5] = m11;\n    newDst[ 6] = m12;\n    newDst[ 7] = m13;\n    newDst[ 8] = m20;\n    newDst[ 9] = m21;\n    newDst[10] = m22;\n    newDst[11] = m23;\n  }\n\n  newDst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  newDst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  newDst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  newDst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationX<T extends Mat4Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = 1;  newDst[ 1] =  0;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] =  c;  newDst[ 6] = s;  newDst[ 7] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = -s;  newDst[10] = c;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] =  0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateX<T extends Mat4Arg = MatType>(m: Mat4Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[4]  = c * m10 + s * m20;\n  newDst[5]  = c * m11 + s * m21;\n  newDst[6]  = c * m12 + s * m22;\n  newDst[7]  = c * m13 + s * m23;\n  newDst[8]  = c * m20 - s * m10;\n  newDst[9]  = c * m21 - s * m11;\n  newDst[10] = c * m22 - s * m12;\n  newDst[11] = c * m23 - s * m13;\n\n  if (m !== newDst) {\n    newDst[ 0] = m[ 0];\n    newDst[ 1] = m[ 1];\n    newDst[ 2] = m[ 2];\n    newDst[ 3] = m[ 3];\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationY<T extends Mat4Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c;  newDst[ 1] = 0;  newDst[ 2] = -s;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = 1;  newDst[ 6] =  0;  newDst[ 7] = 0;\n  newDst[ 8] = s;  newDst[ 9] = 0;  newDst[10] =  c;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] = 0;  newDst[14] =  0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateY<T extends Mat4Arg = MatType>(m: Mat4Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c * m00 - s * m20;\n  newDst[ 1] = c * m01 - s * m21;\n  newDst[ 2] = c * m02 - s * m22;\n  newDst[ 3] = c * m03 - s * m23;\n  newDst[ 8] = c * m20 + s * m00;\n  newDst[ 9] = c * m21 + s * m01;\n  newDst[10] = c * m22 + s * m02;\n  newDst[11] = c * m23 + s * m03;\n\n  if (m !== newDst) {\n    newDst[ 4] = m[ 4];\n    newDst[ 5] = m[ 5];\n    newDst[ 6] = m[ 6];\n    newDst[ 7] = m[ 7];\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationZ<T extends Mat4Arg = MatType>(angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] =  c;  newDst[ 1] = s;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = -s;  newDst[ 5] = c;  newDst[ 6] = 0;  newDst[ 7] = 0;\n  newDst[ 8] =  0;  newDst[ 9] = 0;  newDst[10] = 1;  newDst[11] = 0;\n  newDst[12] =  0;  newDst[13] = 0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateZ<T extends Mat4Arg = MatType>(m: Mat4Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  newDst[ 0] = c * m00 + s * m10;\n  newDst[ 1] = c * m01 + s * m11;\n  newDst[ 2] = c * m02 + s * m12;\n  newDst[ 3] = c * m03 + s * m13;\n  newDst[ 4] = c * m10 - s * m00;\n  newDst[ 5] = c * m11 - s * m01;\n  newDst[ 6] = c * m12 - s * m02;\n  newDst[ 7] = c * m13 - s * m03;\n\n  if (m !== newDst) {\n    newDst[ 8] = m[ 8];\n    newDst[ 9] = m[ 9];\n    newDst[10] = m[10];\n    newDst[11] = m[11];\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nfunction axisRotation<T extends Mat4Arg = MatType>(axis: Vec3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  newDst[ 0] = xx + (1 - xx) * c;\n  newDst[ 1] = x * y * oneMinusCosine + z * s;\n  newDst[ 2] = x * z * oneMinusCosine - y * s;\n  newDst[ 3] = 0;\n  newDst[ 4] = x * y * oneMinusCosine - z * s;\n  newDst[ 5] = yy + (1 - yy) * c;\n  newDst[ 6] = y * z * oneMinusCosine + x * s;\n  newDst[ 7] = 0;\n  newDst[ 8] = x * z * oneMinusCosine + y * s;\n  newDst[ 9] = y * z * oneMinusCosine - x * s;\n  newDst[10] = zz + (1 - zz) * c;\n  newDst[11] = 0;\n  newDst[12] = 0;\n  newDst[13] = 0;\n  newDst[14] = 0;\n  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle. (same as axisRotation)\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nconst rotation = axisRotation;\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction axisRotate<T extends Mat4Arg = MatType>(m: Mat4Arg, axis: Vec3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  newDst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  newDst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  newDst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  newDst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  newDst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  newDst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  newDst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  newDst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  newDst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  newDst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  newDst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  newDst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== newDst) {\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle. (same as rotate)\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nconst rotate = axisRotate;\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction scaling<T extends Mat4Arg = MatType>(v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = v[0];  newDst[ 1] = 0;     newDst[ 2] = 0;     newDst[ 3] = 0;\n  newDst[ 4] = 0;     newDst[ 5] = v[1];  newDst[ 6] = 0;     newDst[ 7] = 0;\n  newDst[ 8] = 0;     newDst[ 9] = 0;     newDst[10] = v[2];  newDst[11] = 0;\n  newDst[12] = 0;     newDst[13] = 0;     newDst[14] = 0;     newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction scale<T extends Mat4Arg = MatType>(m: Mat4Arg, v: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  newDst[ 0] = v0 * m[0 * 4 + 0];\n  newDst[ 1] = v0 * m[0 * 4 + 1];\n  newDst[ 2] = v0 * m[0 * 4 + 2];\n  newDst[ 3] = v0 * m[0 * 4 + 3];\n  newDst[ 4] = v1 * m[1 * 4 + 0];\n  newDst[ 5] = v1 * m[1 * 4 + 1];\n  newDst[ 6] = v1 * m[1 * 4 + 2];\n  newDst[ 7] = v1 * m[1 * 4 + 3];\n  newDst[ 8] = v2 * m[2 * 4 + 0];\n  newDst[ 9] = v2 * m[2 * 4 + 1];\n  newDst[10] = v2 * m[2 * 4 + 2];\n  newDst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== newDst) {\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n * @param s - the amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction uniformScaling<T extends Mat4Arg = MatType>(s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = s;  newDst[ 1] = 0;  newDst[ 2] = 0;  newDst[ 3] = 0;\n  newDst[ 4] = 0;  newDst[ 5] = s;  newDst[ 6] = 0;  newDst[ 7] = 0;\n  newDst[ 8] = 0;  newDst[ 9] = 0;  newDst[10] = s;  newDst[11] = 0;\n  newDst[12] = 0;  newDst[13] = 0;  newDst[14] = 0;  newDst[15] = 1;\n\n  return newDst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n * @param m - The matrix to be modified.\n * @param s - The amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction uniformScale<T extends Mat4Arg = MatType>(m: Mat4Arg, s: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(16)) as T;\n\n  newDst[ 0] = s * m[0 * 4 + 0];\n  newDst[ 1] = s * m[0 * 4 + 1];\n  newDst[ 2] = s * m[0 * 4 + 2];\n  newDst[ 3] = s * m[0 * 4 + 3];\n  newDst[ 4] = s * m[1 * 4 + 0];\n  newDst[ 5] = s * m[1 * 4 + 1];\n  newDst[ 6] = s * m[1 * 4 + 2];\n  newDst[ 7] = s * m[1 * 4 + 3];\n  newDst[ 8] = s * m[2 * 4 + 0];\n  newDst[ 9] = s * m[2 * 4 + 1];\n  newDst[10] = s * m[2 * 4 + 2];\n  newDst[11] = s * m[2 * 4 + 3];\n\n  if (m !== newDst) {\n    newDst[12] = m[12];\n    newDst[13] = m[13];\n    newDst[14] = m[14];\n    newDst[15] = m[15];\n  }\n\n  return newDst;\n}\n\nreturn {\n  create,\n  set,\n  fromMat3,\n  fromQuat,\n  negate,\n  copy,\n  clone,\n  equalsApproximately,\n  equals,\n  identity,\n  transpose,\n  inverse,\n  determinant,\n  invert,\n  multiply,\n  mul,\n  setTranslation,\n  getTranslation,\n  getAxis,\n  setAxis,\n  getScaling,\n  perspective,\n  perspectiveReverseZ,\n  ortho,\n  frustum,\n  frustumReverseZ,\n  aim,\n  cameraAim,\n  lookAt,\n  translation,\n  translate,\n  rotationX,\n  rotateX,\n  rotationY,\n  rotateY,\n  rotationZ,\n  rotateZ,\n  axisRotation,\n  rotation,\n  axisRotate,\n  rotate,\n  scaling,\n  scale,\n  uniformScaling,\n  uniformScale,\n};\n\n}\n\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Mat4Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { QuatArg, QuatType } from './quat';\nimport { Mat3Arg } from './mat3.js';\nimport { Mat4Arg } from './mat4.js';\nimport { Vec3Arg } from './vec3.js';\nimport { getAPI as getVec3API } from './vec3-impl';\nimport { BaseArgType } from './types';\n\nexport { QuatArg, QuatType };\n\ntype QuatCtor<T extends QuatArg = Float32Array>  = new (n: number) => T;\n\nexport type RotationOrder =  'xyz' |  'xzy' |  'yxz' |  'yzx' |  'zxy' |  'zyx';\n\n/**\n * Generates am typed API for Qud\n * */\nfunction getAPIImpl<QuatType extends QuatArg = Float32Array>(Ctor: QuatCtor<QuatType>) {\n  const vec3 = getVec3API<QuatType>(Ctor);\n\n/**\n * Creates a quat4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nfunction create(x?: number, y?: number, z?: number, w?: number) {\n  const newDst = new Ctor(4);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n      if (z !== undefined) {\n        newDst[2] = z;\n        if (w !== undefined) {\n          newDst[3] = w;\n        }\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Quat\n * Also see {@link quat.create} and {@link quat.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends QuatArg = QuatType>(x: number, y: number, z: number, w: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n  newDst[2] = z;\n  newDst[3] = w;\n\n  return newDst;\n}\n\n/**\n * Sets a quaternion from the given angle and  axis,\n * then returns it.\n *\n * @param axis - the axis to rotate around\n * @param angleInRadians - the angle\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The quaternion that represents the given axis and angle\n **/\nfunction fromAxisAngle<T extends QuatArg = QuatType>(axis: Vec3Arg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n  const s = Math.sin(halfAngle);\n\n  newDst[0] = s * axis[0];\n  newDst[1] = s * axis[1];\n  newDst[2] = s * axis[2];\n  newDst[3] = Math.cos(halfAngle);\n\n  return newDst;\n}\n\n/**\n * Gets the rotation axis and angle\n * @param q - quaternion to compute from\n * @param dst - Vec3 to hold result. If not passed in a new one is created.\n * @return angle and axis\n */\nfunction toAxisAngle<T extends Vec3Arg = QuatType>(q: QuatArg, dst?: T): { angle: number, axis: T } {\n  const newDst = (dst ?? vec3.create(3)) as T;\n\n  const angle = Math.acos(q[3]) * 2;\n  const s = Math.sin(angle * 0.5);\n  if (s > utils.EPSILON) {\n    newDst[0] = q[0] / s;\n    newDst[1] = q[1] / s;\n    newDst[2] = q[2] / s;\n  } else {\n    newDst[0] = 1;\n    newDst[1] = 0;\n    newDst[2] = 0;\n  }\n\n  return { angle, axis: newDst };\n}\n\n/**\n * Returns the angle in degrees between two rotations a and b.\n * @param a - quaternion a\n * @param b - quaternion b\n * @return angle in radians between the two quaternions\n */\nfunction angle(a: QuatArg, b: QuatArg) {\n  const d = dot(a, b);\n  return Math.acos(2 * d * d - 1);\n}\n\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction multiply<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const bw = b[3];\n\n  newDst[0] = ax * bw + aw * bx + ay * bz - az * by;\n  newDst[1] = ay * bw + aw * by + az * bx - ax * bz;\n  newDst[2] = az * bw + aw * bz + ax * by - ay * bx;\n  newDst[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return newDst;\n}\n\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nconst mul = multiply;\n\n/**\n * Rotates the given quaternion around the X axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateX<T extends QuatArg = QuatType>(q: QuatArg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const bx = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  newDst[0] = qx * bw + qw * bx;\n  newDst[1] = qy * bw + qz * bx;\n  newDst[2] = qz * bw - qy * bx;\n  newDst[3] = qw * bw - qx * bx;\n\n  return newDst;\n}\n\n/**\n * Rotates the given quaternion around the Y axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateY<T extends QuatArg = QuatType>(q: QuatArg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const by = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  newDst[0] = qx * bw - qz * by;\n  newDst[1] = qy * bw + qw * by;\n  newDst[2] = qz * bw + qx * by;\n  newDst[3] = qw * bw - qy * by;\n\n  return newDst;\n}\n\n/**\n * Rotates the given quaternion around the Z axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateZ<T extends QuatArg = QuatType>(q: QuatArg, angleInRadians: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const bz = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  newDst[0] = qx * bw + qy * bz;\n  newDst[1] = qy * bw - qx * bz;\n  newDst[2] = qz * bw + qw * bz;\n  newDst[3] = qw * bw - qz * bz;\n\n  return newDst;\n}\n\n/**\n * Spherically linear interpolate between two quaternions\n *\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction slerp<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n\n  let bx = b[0];\n  let by = b[1];\n  let bz = b[2];\n  let bw = b[3];\n\n  let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n\n  if (cosOmega < 0) {\n    cosOmega = -cosOmega;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n\n  let scale0;\n  let scale1;\n\n  if (1.0 - cosOmega > utils.EPSILON) {\n    const omega = Math.acos(cosOmega);\n    const sinOmega = Math.sin(omega);\n    scale0 = Math.sin((1 - t) * omega) / sinOmega;\n    scale1 = Math.sin(t * omega) / sinOmega;\n  } else {\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n\n  newDst[0] = scale0 * ax + scale1 * bx;\n  newDst[1] = scale0 * ay + scale1 * by;\n  newDst[2] = scale0 * az + scale1 * bz;\n  newDst[3] = scale0 * aw + scale1 * bw;\n\n  return newDst;\n}\n\n/**\n * Compute the inverse of a quaternion\n *\n * @param q - quaternion to compute the inverse of\n * @returns A quaternion that is the result of a * b\n */\nfunction inverse<T extends QuatArg = QuatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const a0 = q[0];\n  const a1 = q[1];\n  const a2 = q[2];\n  const a3 = q[3];\n\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1 / dot : 0;\n\n  newDst[0] = -a0 * invDot;\n  newDst[1] = -a1 * invDot;\n  newDst[2] = -a2 * invDot;\n  newDst[3] =  a3 * invDot;\n\n  return newDst;\n}\n\n/**\n * Compute the conjugate of a quaternion\n * For quaternions with a magnitude of 1 (a unit quaternion)\n * this returns the same as the inverse but is faster to calculate.\n *\n * @param q - quaternion to compute the conjugate of.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The conjugate of q\n */\nfunction conjugate<T extends QuatArg = QuatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = -q[0];\n  newDst[1] = -q[1];\n  newDst[2] = -q[2];\n  newDst[3] =  q[3];\n\n  return newDst;\n}\n\n/**\n * Creates a quaternion from the given rotation matrix.\n *\n * The created quaternion is not normalized.\n *\n * @param m - rotation matrix\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nfunction fromMat<T extends QuatArg = QuatType>(m: Mat3Arg | Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  /*\n  0 1 2\n  3 4 5\n  6 7 8\n\n  0 1 2\n  4 5 6\n  8 9 10\n   */\n\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const trace = m[0] + m[5] + m[10];\n\n  if (trace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    const root = Math.sqrt(trace + 1); // 2w\n    newDst[3] = 0.5 * root;\n    const invRoot = 0.5 / root; // 1/(4w)\n\n    newDst[0] = (m[6] - m[9]) * invRoot;\n    newDst[1] = (m[8] - m[2]) * invRoot;\n    newDst[2] = (m[1] - m[4]) * invRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n\n    if (m[5] > m[0]) {\n      i = 1;\n    }\n    if (m[10] > m[i * 4 + i]) {\n      i = 2;\n    }\n\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n\n    const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n    newDst[i] = 0.5 * root;\n\n    const invRoot = 0.5 / root;\n\n    newDst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n    newDst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n    newDst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n  }\n\n  return newDst;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param xAngleInRadians - angle to rotate around X axis in radians.\n * @param yAngleInRadians - angle to rotate around Y axis in radians.\n * @param zAngleInRadians - angle to rotate around Z axis in radians.\n * @param order - order to apply euler angles\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n */\nfunction fromEuler<T extends QuatArg = QuatType>(\n    xAngleInRadians: number,\n    yAngleInRadians: number,\n    zAngleInRadians: number,\n    order: RotationOrder,\n    dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const xHalfAngle = xAngleInRadians * 0.5;\n  const yHalfAngle = yAngleInRadians * 0.5;\n  const zHalfAngle = zAngleInRadians * 0.5;\n\n  const sx = Math.sin(xHalfAngle);\n  const cx = Math.cos(xHalfAngle);\n  const sy = Math.sin(yHalfAngle);\n  const cy = Math.cos(yHalfAngle);\n  const sz = Math.sin(zHalfAngle);\n  const cz = Math.cos(zHalfAngle);\n\n  switch (order) {\n    case 'xyz':\n      newDst[0] = sx * cy * cz + cx * sy * sz;\n      newDst[1] = cx * sy * cz - sx * cy * sz;\n      newDst[2] = cx * cy * sz + sx * sy * cz;\n      newDst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'xzy':\n      newDst[0] = sx * cy * cz - cx * sy * sz;\n      newDst[1] = cx * sy * cz - sx * cy * sz;\n      newDst[2] = cx * cy * sz + sx * sy * cz;\n      newDst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    case 'yxz':\n      newDst[0] = sx * cy * cz + cx * sy * sz;\n      newDst[1] = cx * sy * cz - sx * cy * sz;\n      newDst[2] = cx * cy * sz - sx * sy * cz;\n      newDst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    case 'yzx':\n      newDst[0] = sx * cy * cz + cx * sy * sz;\n      newDst[1] = cx * sy * cz + sx * cy * sz;\n      newDst[2] = cx * cy * sz - sx * sy * cz;\n      newDst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'zxy':\n      newDst[0] = sx * cy * cz - cx * sy * sz;\n      newDst[1] = cx * sy * cz + sx * cy * sz;\n      newDst[2] = cx * cy * sz + sx * sy * cz;\n      newDst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'zyx':\n      newDst[0] = sx * cy * cz - cx * sy * sz;\n      newDst[1] = cx * sy * cz + sx * cy * sz;\n      newDst[2] = cx * cy * sz - sx * sy * cz;\n      newDst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    default:\n      throw new Error(`Unknown rotation order: ${order}`);\n  }\n\n  return newDst;\n}\n\n/**\n * Copies a quaternion. (same as {@link quat.clone})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is a copy of q\n */\nfunction copy<T extends QuatArg = QuatType>(q: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = q[0];\n  newDst[1] = q[1];\n  newDst[2] = q[2];\n  newDst[3] = q[3];\n\n  return newDst;\n}\n\n/**\n * Clones a quaternion. (same as {@link quat.copy})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A copy of q.\n */\nconst clone = copy;\n\n/**\n * Adds two quaternions; assumes a and b have the same dimension.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the sum of a and b.\n */\nfunction add<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n  newDst[2] = a[2] + b[2];\n  newDst[3] = a[3] + b[3];\n\n  return newDst;\n}\n\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nfunction subtract<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n  newDst[2] = a[2] - b[2];\n  newDst[3] = a[3] - b[3];\n\n  return newDst;\n}\n\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Multiplies a quaternion by a scalar.\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nfunction mulScalar<T extends QuatArg = QuatType>(v: QuatArg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n  newDst[2] = v[2] * k;\n  newDst[3] = v[3] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a quaternion by a scalar. (same as mulScalar)\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nfunction divScalar<T extends QuatArg = QuatType>(v: QuatArg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n  newDst[2] = v[2] / k;\n  newDst[3] = v[3] / k;\n\n  return newDst;\n}\n\n/**\n * Computes the dot product of two quaternions\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns dot product\n */\nfunction dot(a: QuatArg, b: QuatArg): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n\n/**\n * Performs linear interpolation on two quaternions.\n * Given quaternions a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param t - Interpolation coefficient.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends QuatArg = QuatType>(a: QuatArg, b: QuatArg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n  newDst[2] = a[2] + t * (b[2] - a[2]);\n  newDst[3] = a[3] + t * (b[3] - a[3]);\n\n  return newDst;\n}\n\n/**\n * Computes the length of quaternion\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nfunction length(v: QuatArg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n\n/**\n * Computes the length of quaternion (same as length)\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of quaternion\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nfunction lengthSq(v: QuatArg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n\n/**\n * Computes the square of the length of quaternion (same as lengthSq)\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nconst lenSq = lengthSq;\n\n/**\n * Divides a quaternion by its Euclidean length and returns the quotient.\n * @param v - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The normalized quaternion.\n */\nfunction normalize<T extends QuatArg = QuatType>(v: QuatArg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n    newDst[2] = v2 / len;\n    newDst[3] = v3 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n    newDst[3] = 0;\n  }\n\n  return newDst;\n}\n\n/**\n * Check if 2 quaternions are approximately equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are approximately equal\n */\nfunction equalsApproximately(a: QuatArg, b: QuatArg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON &&\n         Math.abs(a[3] - b[3]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 quaternions are exactly equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are exactly equal\n */\nfunction equals(a: QuatArg, b: QuatArg): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Creates an identity quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns an identity quaternion\n */\nfunction identity<T extends QuatArg = QuatType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = 0;\n  newDst[3] = 1;\n\n  return newDst;\n}\n\nconst tempVec3 = vec3.create();\nconst xUnitVec3 = vec3.create();\nconst yUnitVec3 = vec3.create();\n\n/**\n * Computes a quaternion to represent the shortest rotation from one vector to another.\n *\n * @param aUnit - the start vector\n * @param bUnit - the end vector\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nfunction rotationTo<T extends QuatArg = QuatType>(aUnit: Vec3Arg, bUnit: Vec3Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const dot = vec3.dot(aUnit, bUnit);\n  if (dot < -0.999999) {\n    vec3.cross(xUnitVec3, aUnit, tempVec3);\n    if (vec3.len(tempVec3) < 0.000001) {\n      vec3.cross(yUnitVec3, aUnit, tempVec3);\n    }\n\n    vec3.normalize(tempVec3, tempVec3);\n    fromAxisAngle(tempVec3, Math.PI, newDst);\n\n    return newDst;\n  } else if (dot > 0.999999) {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n    newDst[3] = 1;\n\n    return newDst;\n  } else {\n    vec3.cross(aUnit, bUnit, tempVec3);\n\n    newDst[0] = tempVec3[0];\n    newDst[1] = tempVec3[1];\n    newDst[2] = tempVec3[2];\n    newDst[3] = 1 + dot;\n\n    return normalize(newDst, newDst);\n  }\n}\n\nconst tempQuat1 = new Ctor(4);\nconst tempQuat2 = new Ctor(4);\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param c - the third quaternion\n * @param d - the fourth quaternion\n * @param t - Interpolation coefficient 0 to 1\n * @returns result\n */\nfunction sqlerp<T extends QuatArg = QuatType>(\n    a: QuatArg,\n    b: QuatArg,\n    c: QuatArg,\n    d: QuatArg,\n    t: number,\n    dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  slerp(a, d, t, tempQuat1);\n  slerp(b, c, t, tempQuat2);\n  slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), newDst);\n\n  return newDst;\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  fromAxisAngle,\n  toAxisAngle,\n  angle,\n  multiply,\n  mul,\n  rotateX,\n  rotateY,\n  rotateZ,\n  slerp,\n  inverse,\n  conjugate,\n  fromMat,\n  fromEuler,\n  copy,\n  clone,\n  add,\n  subtract,\n  sub,\n  mulScalar,\n  scale,\n  divScalar,\n  dot,\n  lerp,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  normalize,\n  equalsApproximately,\n  equals,\n  identity,\n  rotationTo,\n  sqlerp,\n};\n\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nexport function getAPI<T extends QuatArg = Float32Array>(Ctor: QuatCtor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Vec4Arg, Vec4Type } from './vec4';\nimport { Mat4Arg } from './mat4';\nimport { BaseArgType } from './types';\n\nexport { Vec4Arg, Vec4Type };\n\ntype Vec4Ctor<T extends Vec4Arg = Float32Array>  = new (n: number) => T;\n\n/**\n * Generates am typed API for Vec4\n * */\nfunction getAPIImpl<VecType extends Vec4Arg = Float32Array>(Ctor: Vec4Ctor<VecType>) {\n\n/**\n * Creates a vec4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nfunction create(x?: number, y?: number, z?: number, w?: number) {\n  const newDst = new Ctor(4);\n  if (x !== undefined) {\n    newDst[0] = x;\n    if (y !== undefined) {\n      newDst[1] = y;\n      if (z !== undefined) {\n        newDst[2] = z;\n        if (w !== undefined) {\n          newDst[3] = w;\n        }\n      }\n    }\n  }\n  return newDst;\n}\n\n/**\n * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nconst fromValues = create;\n\n/**\n * Sets the values of a Vec4\n * Also see {@link vec4.create} and {@link vec4.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set<T extends Vec4Arg = VecType>(x: number, y: number, z: number, w: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = x;\n  newDst[1] = y;\n  newDst[2] = z;\n  newDst[3] = w;\n\n  return newDst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.ceil(v[0]);\n  newDst[1] = Math.ceil(v[1]);\n  newDst[2] = Math.ceil(v[2]);\n  newDst[3] = Math.ceil(v[3]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.floor(v[0]);\n  newDst[1] = Math.floor(v[1]);\n  newDst[2] = Math.floor(v[2]);\n  newDst[3] = Math.floor(v[3]);\n\n  return newDst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.round(v[0]);\n  newDst[1] = Math.round(v[1]);\n  newDst[2] = Math.round(v[2]);\n  newDst[3] = Math.round(v[3]);\n\n  return newDst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp<T extends Vec4Arg = VecType>(v: Vec4Arg, min = 0, max = 1, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.min(max, Math.max(min, v[0]));\n  newDst[1] = Math.min(max, Math.max(min, v[1]));\n  newDst[2] = Math.min(max, Math.max(min, v[2]));\n  newDst[3] = Math.min(max, Math.max(min, v[3]));\n\n  return newDst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + b[0];\n  newDst[1] = a[1] + b[1];\n  newDst[2] = a[2] + b[2];\n  newDst[3] = a[3] + b[3];\n\n  return newDst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, scale: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + b[0] * scale;\n  newDst[1] = a[1] + b[1] * scale;\n  newDst[2] = a[2] + b[2] * scale;\n  newDst[3] = a[3] + b[3] * scale;\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] - b[0];\n  newDst[1] = a[1] - b[1];\n  newDst[2] = a[2] - b[2];\n  newDst[3] = a[3] - b[3];\n\n  return newDst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a: Vec4Arg, b: Vec4Arg): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON &&\n         Math.abs(a[3] - b[3]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a: Vec4Arg, b: Vec4Arg): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, t: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + t * (b[0] - a[0]);\n  newDst[1] = a[1] + t * (b[1] - a[1]);\n  newDst[2] = a[2] + t * (b[2] - a[2]);\n  newDst[3] = a[3] + t * (b[3] - a[3]);\n\n  return newDst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, t: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n  newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n  newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n  newDst[3] = a[3] + t[3] * (b[3] - a[3]);\n\n  return newDst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.max(a[0], b[0]);\n  newDst[1] = Math.max(a[1], b[1]);\n  newDst[2] = Math.max(a[2], b[2]);\n  newDst[3] = Math.max(a[3], b[3]);\n\n  return newDst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = Math.min(a[0], b[0]);\n  newDst[1] = Math.min(a[1], b[1]);\n  newDst[2] = Math.min(a[2], b[2]);\n  newDst[3] = Math.min(a[3], b[3]);\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar<T extends Vec4Arg = VecType>(v: Vec4Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] * k;\n  newDst[1] = v[1] * k;\n  newDst[2] = v[2] * k;\n  newDst[3] = v[3] * k;\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar<T extends Vec4Arg = VecType>(v: Vec4Arg, k: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0] / k;\n  newDst[1] = v[1] / k;\n  newDst[2] = v[2] / k;\n  newDst[3] = v[3] / k;\n\n  return newDst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = 1 / v[0];\n  newDst[1] = 1 / v[1];\n  newDst[2] = 1 / v[2];\n  newDst[3] = 1 / v[3];\n\n  return newDst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n\n/**\n * Computes the dot product of two vectors\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a: Vec4Arg, b: Vec4Arg): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v: Vec4Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v: Vec4Arg): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a: Vec4Arg, b: Vec4Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  const dw = a[3] - b[3];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a: Vec4Arg, b: Vec4Arg): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  const dw = a[3] - b[3];\n  return dx * dx + dy * dy + dz * dz + dw * dw;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n\n  if (len > 0.00001) {\n    newDst[0] = v0 / len;\n    newDst[1] = v1 / len;\n    newDst[2] = v2 / len;\n    newDst[3] = v3 / len;\n  } else {\n    newDst[0] = 0;\n    newDst[1] = 0;\n    newDst[2] = 0;\n    newDst[3] = 0;\n  }\n\n  return newDst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = -v[0];\n  newDst[1] = -v[1];\n  newDst[2] = -v[2];\n  newDst[3] = -v[3];\n\n  return newDst;\n}\n\n/**\n * Copies a vector. (same as {@link vec4.clone})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy<T extends Vec4Arg = VecType>(v: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = v[0];\n  newDst[1] = v[1];\n  newDst[2] = v[2];\n  newDst[3] = v[3];\n\n  return newDst;\n}\n\n/**\n * Clones a vector. (same as {@link vec4.copy})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] * b[0];\n  newDst[1] = a[1] * b[1];\n  newDst[2] = a[2] * b[2];\n  newDst[3] = a[3] * b[3];\n\n  return newDst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = a[0] / b[0];\n  newDst[1] = a[1] / b[1];\n  newDst[2] = a[2] / b[2];\n  newDst[3] = a[3] / b[3];\n\n  return newDst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero<T extends Vec4Arg = VecType>(dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  newDst[0] = 0;\n  newDst[1] = 0;\n  newDst[2] = 0;\n  newDst[3] = 0;\n\n  return newDst;\n}\n\n\n/**\n * transform vec4 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec4 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4<T extends Vec4Arg = VecType>(v: Vec4Arg, m: Mat4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  const w = v[3];\n\n  newDst[0] = m[0] * x + m[4] * y + m[ 8] * z + m[12] * w;\n  newDst[1] = m[1] * x + m[5] * y + m[ 9] * z + m[13] * w;\n  newDst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  newDst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n\n  return newDst;\n}\n\n\n/**\n * Treat a 4D vector as a direction and set it's length\n *\n * @param a The vec4 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nfunction setLength<T extends Vec4Arg = VecType>(a: Vec4Arg, len: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n  normalize(a, newDst);\n  return mulScalar(newDst, len, newDst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec4 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nfunction truncate<T extends Vec4Arg = VecType>(a: Vec4Arg, maxLen: number, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, newDst);\n  }\n\n  return copy(a, newDst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nfunction midpoint<T extends Vec4Arg = VecType>(a: Vec4Arg, b: Vec4Arg, dst?: T) {\n  const newDst = (dst ?? new Ctor(4)) as T;\n  return lerp(a, b, 0.5, newDst);\n}\n\nreturn {\n  create,\n  fromValues,\n  set,\n  ceil,\n  floor,\n  round,\n  clamp,\n  add,\n  addScaled,\n  subtract,\n  sub,\n  equalsApproximately,\n  equals,\n  lerp,\n  lerpV,\n  max,\n  min,\n  mulScalar,\n  scale,\n  divScalar,\n  inverse,\n  invert,\n  dot,\n  length,\n  len,\n  lengthSq,\n  lenSq,\n  distance,\n  dist,\n  distanceSq,\n  distSq,\n  normalize,\n  negate,\n  copy,\n  clone,\n  multiply,\n  mul,\n  divide,\n  div,\n  zero,\n  transformMat4,\n  setLength,\n  truncate,\n  midpoint,\n};\n}\n\ntype API<T extends BaseArgType = Float32Array> = ReturnType<typeof getAPIImpl<T>>;\n\nconst cache = new Map();\n\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nexport function getAPI<T extends Mat4Arg = Float32Array>(Ctor: Vec4Ctor<T>) {\n  let api = cache.get(Ctor);\n  if (!api) {\n    api = getAPIImpl<T>(Ctor);\n    cache.set(Ctor, api);\n  }\n  return api as API<T>;\n}\n\n", "import {BaseArgType, ZeroArray} from './types';\nimport {Mat3Arg, Mat3Type, getAPI as getMat3API} from './mat3-impl';\nimport {Mat4Arg, Mat4Type, getAPI as getMat4API} from './mat4-impl';\nimport {QuatArg, QuatType, getAPI as getQuatAPI, RotationOrder} from './quat-impl';\nimport {Vec2Arg, Vec2Type, getAPI as getVec2API} from './vec2-impl';\nimport {Vec3Arg, Vec3Type, getAPI as getVec3API} from './vec3-impl';\nimport {Vec4Arg, Vec4Type, getAPI as getVec4API} from './vec4-impl';\nimport * as utils from './utils';\n\nexport {\n  RotationOrder,\n  utils,\n\n  BaseArgType,\n\n  Mat3Arg,\n  Mat4Arg,\n  QuatArg,\n  Vec2Arg,\n  Vec3Arg,\n  Vec4Arg,\n\n  Mat3Type,\n  Mat4Type,\n  QuatType,\n  Vec2Type,\n  Vec3Type,\n  Vec4Type,\n};\n\nexport type BaseCtor<T extends BaseArgType>  = new (n: number) => T;\n\nexport type Mat3 = Mat3Type<Float32Array>;\nexport type Mat4 = Mat4Type<Float32Array>;\nexport type Quat = QuatType<Float32Array>;\nexport type Vec2 = Vec2Type<Float32Array>;\nexport type Vec3 = Vec3Type<Float32Array>;\nexport type Vec4 = Vec4Type<Float32Array>;\n\nexport type Mat3d = Mat3Type<Float64Array>;\nexport type Mat4d = Mat4Type<Float64Array>;\nexport type Quatd = QuatType<Float64Array>;\nexport type Vec2d = Vec2Type<Float64Array>;\nexport type Vec3d = Vec3Type<Float64Array>;\nexport type Vec4d = Vec4Type<Float64Array>;\n\nexport type Mat3n = Mat3Type<number[]>;\nexport type Mat4n = Mat4Type<number[]>;\nexport type Quatn = QuatType<number[]>;\nexport type Vec2n = Vec2Type<number[]>;\nexport type Vec3n = Vec3Type<number[]>;\nexport type Vec4n = Vec4Type<number[]>;\n\n/**\n * Generate wgpu-matrix API for type\n */\nfunction wgpuMatrixAPI<\n    Mat3 extends BaseArgType,\n    Mat4 extends BaseArgType,\n    Quat extends BaseArgType,\n    Vec2 extends BaseArgType,\n    Vec3 extends BaseArgType,\n    Vec4 extends BaseArgType,\n>(\n    Mat3Ctor: BaseCtor<Mat3>,\n    Mat4Ctor: BaseCtor<Mat4>,\n    QuatCtor: BaseCtor<Quat>,\n    Vec2Ctor: BaseCtor<Vec2>,\n    Vec3Ctor: BaseCtor<Vec3>,\n    Vec4Ctor: BaseCtor<Vec4>,\n) {\n  return {\n    /** @namespace mat4 */\n    mat4: getMat4API<Mat3>(Mat3Ctor),\n    /** @namespace mat3 */\n    mat3: getMat3API<Mat4>(Mat4Ctor),\n    /** @namespace quat */\n    quat: getQuatAPI<Quat>(QuatCtor),\n    /** @namespace vec2 */\n    vec2: getVec2API<Vec2>(Vec2Ctor),\n    /** @namespace vec3 */\n    vec3: getVec3API<Vec3>(Vec3Ctor),\n    /** @namespace vec4 */\n    vec4: getVec4API<Vec4>(Vec4Ctor),\n  };\n}\n\nexport const {\n  /** @namespace */\n  mat4,\n  /** @namespace */\n  mat3,\n  /** @namespace */\n  quat,\n  /** @namespace */\n  vec2,\n  /** @namespace */\n  vec3,\n  /** @namespace */\n  vec4,\n} = wgpuMatrixAPI<\n  Mat3, Mat4, Quat, Vec2, Vec3, Vec4>(\n    Float32Array, Float32Array, Float32Array, Float32Array, Float32Array, Float32Array);\n\nexport const {\n  /** @namespace */\n  mat4: mat4d,\n  /** @namespace */\n  mat3: mat3d,\n  /** @namespace */\n  quat: quatd,\n  /** @namespace */\n  vec2: vec2d,\n  /** @namespace */\n  vec3: vec3d,\n  /** @namespace */\n  vec4: vec4d,\n} = wgpuMatrixAPI<\n  Mat3d, Mat4d, Quatd, Vec2d, Vec3d, Vec4d>(\n    Float64Array, Float64Array, Float64Array, Float64Array, Float64Array, Float64Array);\n\nexport const {\n  /** @namespace */\n  mat4: mat4n,\n  /** @namespace */\n  mat3: mat3n,\n  /** @namespace */\n  quat: quatn,\n  /** @namespace */\n  vec2: vec2n,\n  /** @namespace */\n  vec3: vec3n,\n  /** @namespace */\n  vec4: vec4n,\n} = wgpuMatrixAPI<\n  Mat3n, Mat4n, Quatn, Vec2n, Vec3n, Vec4n>(\n    ZeroArray, Array, Array, Array, Array, Array);\n", "export interface OBJLoadResult {\n  vertices: number[];\n  normals: number[];\n  texcoords: number[];\n  faces: number[];\n}\n\nfunction isWhitespace(c: string) {\n  return c === \" \" || c === \"\\r\";\n}\n\nexport default class OBJLoader {\n  private file = \"\";\n  private contents = \"\";\n  private end = 0;\n  private line = 1;\n\n  public static async load(file: string) {\n    const loader = new OBJLoader();\n\n    loader.file = file;\n    loader.contents = await fetch(file).then((r) => r.text());\n\n    const out: OBJLoadResult = {\n      vertices: [],\n      normals: [],\n      texcoords: [],\n      faces: [],\n    };\n\n    while (!loader.atEnd()) {\n      loader.scanNext(out);\n    }\n\n    return out;\n  }\n\n  private atEnd() {\n    return this.end === this.contents.length;\n  }\n\n  private next() {\n    if (!this.atEnd()) {\n      this.end++;\n    }\n  }\n\n  private peek() {\n    return this.contents[this.end];\n  }\n\n  private expect(c: string) {\n    if (this.atEnd()) {\n      throw `expected '${c}' on line ${this.line}`;\n    }\n\n    const other = this.contents[this.end];\n    if (other !== c) {\n      throw `expected '${c}' on line ${this.line} got '${other}'`;\n    }\n\n    this.next();\n  }\n\n  private skipWhitespace() {\n    while (!this.atEnd() && isWhitespace(this.peek())) {\n      this.next();\n    }\n  }\n\n  private seekToEndOfLine() {\n    while (!this.atEnd() && this.peek() !== \"\\n\") {\n      this.next();\n    }\n\n    this.next();\n    this.line++;\n  }\n\n  private scanToken() {\n    const start = this.end;\n\n    while (!this.atEnd()) {\n      const c = this.peek();\n      if (isWhitespace(c) || c === \"\\n\") {\n        break;\n      }\n      this.next();\n    }\n\n    return this.contents.substring(start, this.end);\n  }\n\n  private scanNumber() {\n    this.skipWhitespace();\n\n    const start = this.end;\n\n    while (!this.atEnd()) {\n      const c = this.peek();\n      const isNum =\n        c === \"-\" ||\n        c === \".\" ||\n        (c >= \"0\" && c <= \"9\") ||\n        c === \"E\" ||\n        c === \"e\";\n      if (!isNum) {\n        break;\n      }\n      this.next();\n    }\n\n    const str = this.contents.substring(start, this.end);\n    return Number.parseFloat(str);\n  }\n\n  private scanVertex(out: OBJLoadResult) {\n    out.vertices.push(this.scanNumber());\n    out.vertices.push(this.scanNumber());\n    out.vertices.push(this.scanNumber());\n  }\n\n  private scanVertexNormal(out: OBJLoadResult) {\n    out.normals.push(this.scanNumber());\n    out.normals.push(this.scanNumber());\n    out.normals.push(this.scanNumber());\n  }\n\n  private scanVertexTexture(out: OBJLoadResult) {\n    out.texcoords.push(this.scanNumber());\n    out.texcoords.push(this.scanNumber());\n  }\n\n  private scanTriple(out: OBJLoadResult) {\n    out.faces.push(this.scanNumber());\n    this.expect(\"/\");\n    out.faces.push(this.scanNumber());\n    this.expect(\"/\");\n    out.faces.push(this.scanNumber());\n  }\n\n  private scanFace(out: OBJLoadResult) {\n    this.scanTriple(out);\n    this.scanTriple(out);\n    this.scanTriple(out);\n\n    if (this.peek() === \"\\r\") {\n      this.next();\n    }\n\n    if (this.peek() !== \"\\n\") {\n      let v0 = out.faces.length - 9;\n      out.faces.push(out.faces[v0 + 0]);\n      out.faces.push(out.faces[v0 + 1]);\n      out.faces.push(out.faces[v0 + 2]);\n\n      out.faces.push(out.faces[v0 + 6]);\n      out.faces.push(out.faces[v0 + 7]);\n      out.faces.push(out.faces[v0 + 8]);\n\n      this.scanTriple(out);\n    }\n  }\n\n  private scanNext(out: OBJLoadResult) {\n    if (this.atEnd()) {\n      return;\n    }\n\n    this.skipWhitespace();\n\n    const tok = this.scanToken();\n    this.next();\n\n    if (tok === \"\") {\n      this.line++;\n      return;\n    }\n\n    switch (tok) {\n      case \"#\":\n        break;\n      case \"v\":\n        this.scanVertex(out);\n        break;\n      case \"vn\":\n        this.scanVertexNormal(out);\n        break;\n      case \"vt\":\n        this.scanVertexTexture(out);\n        break;\n      case \"f\":\n        this.scanFace(out);\n        break;\n      case \"g\":\n        break;\n      case \"o\":\n        break;\n      case \"s\":\n        break;\n      case \"usemtl\":\n        break;\n      case \"mtllib\":\n        break;\n      default:\n        if (tok.length === 1) {\n          throw `unknown token '${tok}' (${tok.charCodeAt(0)}) on line ${this.line} in ${this.file}`;\n        } else {\n          throw `unknown token '${tok}' on line ${this.line} in ${this.file}`;\n        }\n    }\n\n    this.seekToEndOfLine();\n  }\n}\n", "struct VertexOut {\n  @builtin(position) position: vec4f,\n  @location(0) texcoord: vec2f,\n}\n\n@vertex fn vp(@builtin(vertex_index) i: u32) -> VertexOut {\n  var out: VertexOut;\n\n  let uv = vec2f(vec2(i & 2, (i << 1) & 2));\n  let pos = vec4f(uv * vec2f(2, -2) + vec2f(-1, 1), 0, 1);\n\n  out.position = pos.xyww;\n  out.texcoord = uv;\n  return out;\n}\n\n@fragment fn fp(in: VertexOut) -> @location(0) vec4f {\n  let top = vec4f(0.7, 0.8, 0.9, 1.0);\n  let bot = vec4f(0.5, 0.7, 0.9, 1.0);\n  return mix(top, bot, in.texcoord.y);\n}\n", "override SHELL_COUNT: f32 = 32.0;\n\nstruct VertexIn {\n  @builtin(instance_index) instance: u32,\n  @location(0) position: vec3f,\n  @location(1) normal: vec3f,\n  @location(2) texcoord: vec2f,\n}\n\nstruct VertexOut {\n  @builtin(position) position: vec4f,\n  @location(0) normal: vec3f,\n  @location(1) texcoord: vec2f,\n  @location(2) @interpolate(flat) instance: u32,\n}\n\n@group(0) @binding(0) var<uniform> u: Uniforms;\n\nfn random(uv: vec2f) -> f32 {\n  return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfn steepCos(angle: f32, slope: f32) -> f32 {\n  return atan(slope * cos(angle)) / atan(slope);\n}\n\n@vertex fn vp(in: VertexIn) -> VertexOut {\n  var out: VertexOut;\n\n  let scale = 1.0 + f32(in.instance) * 0.002;\n  let height = f32(in.instance) / SHELL_COUNT;\n  let position = in.position * scale + vec3f(0.0, -height * 0.04, 0.0);\n\n  out.position = u.cameraProjection * u.cameraView * vec4f(position, 1.0);\n  out.normal = in.normal;\n  out.texcoord = in.texcoord;\n  out.instance = in.instance;\n  return out;\n}\n\n@fragment fn fp(in: VertexOut) -> @location(0) vec4f {\n  let uv = in.texcoord * 256.0;\n\n  let height = f32(in.instance) / SHELL_COUNT;\n\n  let cell = floor(uv);\n  let local = (uv - cell) * 2.0 - 1.0;\n  if ((random(cell) - height) * 2.0 < length(local) * height) {\n    discard;\n  }\n\n  let light = normalize(vec3f(1.0, 1.0, 0.0));\n\n  let ambient = 0.4;\n  let diffuse = dot(light, in.normal) * 0.5 + 0.5;\n  let lighting = vec3f((ambient + diffuse) * height);\n\n  let stripe = steepCos(in.texcoord.y * 14.0, 2.0) * 0.5 + 0.5;\n  let color = mix(vec3f(0.25, 0.15, 0.0), vec3f(1.0, 0.7, 0.0), stripe);\n\n  return vec4f(color * lighting, 1 - height);\n}\n", "struct VertexOut {\n  @builtin(position) position: vec4f,\n  @location(0) m: vec2f,\n  @location(1) nw: vec2f,\n  @location(2) ne: vec2f,\n  @location(3) sw: vec2f,\n  @location(4) se: vec2f,\n}\n\n@group(0) @binding(0) var<uniform> u: Uniforms;\n@group(0) @binding(1) var surface: texture_2d<f32>;\n@group(0) @binding(2) var surfaceSampler: sampler;\n\n@vertex fn vp(@builtin(vertex_index) i: u32) -> VertexOut {\n  var out: VertexOut;\n\n  let uv = vec2f(vec2(i & 2, (i << 1) & 2));\n  out.position = vec4f(uv * vec2f(2, -2) + vec2f(-1, 1), 0, 1);\n\n  let texel = uv * u.screenResolution;\n  out.nw = (texel + vec2f(-1, -1)) / u.screenResolution;\n  out.ne = (texel + vec2f(1, -1)) / u.screenResolution;\n  out.sw = (texel + vec2f(-1, 1)) / u.screenResolution;\n  out.se = (texel + vec2f(1, 1)) / u.screenResolution;\n  out.m = uv;\n\n  return out;\n}\n\n@fragment fn fp(in: VertexOut) -> @location(0) vec4f {\n  let FXAA_REDUCE_MIN = 1.0 / 128.0;\n  let FXAA_REDUCE_MUL = 1.0 / 8.0;\n  let FXAA_SPAN_MAX = 8.0;\n\n  let luma = vec3f(0.299, 0.587, 0.114);\n\n  let lumaNW = dot(textureSample(surface, surfaceSampler, in.nw).xyz, luma);\n  let lumaNE = dot(textureSample(surface, surfaceSampler, in.ne).xyz, luma);\n  let lumaSW = dot(textureSample(surface, surfaceSampler, in.sw).xyz, luma);\n  let lumaSE = dot(textureSample(surface, surfaceSampler, in.se).xyz, luma);\n  let lumaM = dot(textureSample(surface, surfaceSampler, in.m).xyz, luma);\n\n  var dir: vec2f;\n  dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n  dir.y = (lumaNW + lumaSW) - (lumaNE + lumaSE);\n\n  let reduce = max(FXAA_REDUCE_MIN, (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL));\n\n  var rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + reduce);\n  dir = max(vec2f(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin);\n  dir = min(vec2f(FXAA_SPAN_MAX, FXAA_SPAN_MAX), dir);\n  dir /= u.screenResolution;\n\n  let lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n  let lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n  var rgbA = textureSample(surface, surfaceSampler, in.m + dir * (1.0 / 3.0 - 0.5)).xyz;\n  rgbA += textureSample(surface, surfaceSampler, in.m + dir * (2.0 / 3.0 - 0.5)).xyz;\n  rgbA *= 0.5;\n\n  var rgbB = textureSample(surface, surfaceSampler, in.m + dir * -0.5).xyz;\n  rgbB += textureSample(surface, surfaceSampler, in.m + dir * 0.5).xyz;\n  rgbB = rgbA * 0.5 + 0.25 * rgbB;\n\n  var lumaB = dot(rgbB, luma);\n  if (lumaB < lumaMin || lumaB > lumaMax) {\n    return vec4f(rgbA, 1.0);\n  } else {\n    return vec4f(rgbB, 1.0);\n  }\n}\n", "import { Mat4, Vec3, mat4, vec2, vec3 } from \"wgpu-matrix\";\nimport OBJLoader, { OBJLoadResult } from \"./obj-loader\";\nimport skyWGSL from \"./sky.wgsl\";\nimport shellWGSL from \"./shell.wgsl\";\nimport fxaaWGSL from \"./fxaa.wgsl\";\n\nconst RADIANS = Math.PI / 180;\nconst SIZE_UINT16 = 2;\nconst SIZE_FLOAT = 4;\nconst SIZE_VEC4 = 4 * SIZE_FLOAT;\nconst SIZE_MAT4 = 16 * SIZE_FLOAT;\n\nlet device: GPUDevice;\nlet presentationFormat: GPUTextureFormat;\nlet cache: RenderCache;\nlet instrument: Instrument | undefined;\n\nlet uniformsWGSL: string;\nlet ubuf: GPUBuffer;\n\nconst keyboard: { [key: string]: boolean } = {};\n\nconst mouse = {\n  x: 0,\n  y: 0,\n  prevX: 0,\n  prevY: 0,\n  deltaX: 0,\n  deltaY: 0,\n  button0: false,\n  button1: false,\n  button2: false,\n  wheel: 0,\n};\n\naddEventListener(\"keydown\", (e) => {\n  keyboard[e.code] = true;\n});\n\naddEventListener(\"keyup\", (e) => {\n  keyboard[e.code] = false;\n});\n\naddEventListener(\"mousedown\", (e) => {\n  if (e.button === 0) {\n    mouse.button0 = true;\n  } else if (e.button === 1) {\n    mouse.button1 = true;\n  } else if (e.button === 2) {\n    mouse.button2 = true;\n  }\n});\n\naddEventListener(\"mouseup\", (e) => {\n  if (e.button === 0) {\n    mouse.button0 = false;\n  } else if (e.button === 1) {\n    mouse.button1 = false;\n  } else if (e.button === 2) {\n    mouse.button2 = false;\n  }\n});\n\naddEventListener(\"wheel\", (e) => {\n  mouse.wheel = e.deltaY;\n});\n\naddEventListener(\"mousemove\", (e) => {\n  mouse.x = e.clientX;\n  mouse.y = e.clientY;\n});\n\nfunction clamp(n: number, lo: number, hi: number) {\n  if (n < lo) {\n    return lo;\n  } else if (n > hi) {\n    return hi;\n  } else {\n    return n;\n  }\n}\n\nclass Camera {\n  private yaw: number;\n  private pitch = 0;\n\n  private front = vec3.create();\n  private right = vec3.create();\n  private up = vec3.create();\n\n  private positionA: Vec3;\n  private positionB: Vec3;\n\n  constructor(pos: Vec3, yaw: number) {\n    this.positionA = vec3.clone(pos);\n    this.positionB = vec3.clone(pos);\n    this.yaw = yaw;\n  }\n\n  public update() {\n    if (mouse.button0) {\n      const sensitivity = 0.005;\n      this.yaw += mouse.deltaX * sensitivity;\n      this.pitch -= mouse.deltaY * sensitivity;\n      this.pitch = clamp(this.pitch, -85 * RADIANS, 85 * RADIANS);\n    }\n\n    this.front[0] = Math.cos(this.yaw) * Math.cos(this.pitch);\n    this.front[1] = Math.sin(this.pitch);\n    this.front[2] = Math.sin(this.yaw) * Math.cos(this.pitch);\n    vec3.normalize(this.front, this.front);\n\n    vec3.normalize(vec3.cross(this.front, vec3.create(0, 1, 0)), this.right);\n    vec3.normalize(vec3.cross(this.right, this.front), this.up);\n\n    let forward = 0;\n    let right = 0;\n    let up = 0;\n\n    let moveSpeed: number;\n    if (keyboard.ShiftLeft) {\n      moveSpeed = 0.1;\n    } else {\n      moveSpeed = 0.03;\n    }\n\n    if (keyboard.KeyW) {\n      forward -= moveSpeed;\n    }\n    if (keyboard.KeyS) {\n      forward += moveSpeed;\n    }\n    if (keyboard.KeyA) {\n      right += moveSpeed;\n    }\n    if (keyboard.KeyD) {\n      right -= moveSpeed;\n    }\n    if (keyboard.KeyQ) {\n      up += moveSpeed;\n    }\n    if (keyboard.KeyE || keyboard.Space) {\n      up -= moveSpeed;\n    }\n\n    vec3.add(\n      this.positionB,\n      vec3.mulScalar(this.front, -forward),\n      this.positionB,\n    );\n    vec3.add(\n      this.positionB,\n      vec3.mulScalar(vec3.normalize(vec3.cross(this.front, this.up)), -right),\n      this.positionB,\n    );\n    this.positionB[1] -= up;\n\n    vec3.lerp(this.positionA, this.positionB, 0.2, this.positionA);\n  }\n\n  public view(dst?: Mat4) {\n    return mat4.lookAt(\n      this.positionA,\n      vec3.add(this.positionA, this.front),\n      this.up,\n      dst,\n    );\n  }\n}\n\nclass Model {\n  private vbuf: GPUBuffer;\n  private ibuf: GPUBuffer;\n  private indexCount: number;\n\n  private constructor(obj: OBJLoadResult) {\n    const faceToVertexIndex = new Map<string, number>();\n\n    const vertices: number[] = [];\n    const indices: number[] = [];\n\n    for (let i = 0; i < obj.faces.length; i += 3) {\n      const v = obj.faces[i + 0];\n      const vt = obj.faces[i + 1];\n      const vn = obj.faces[i + 2];\n\n      const key = (\n        (BigInt(vn) << 32n) |\n        (BigInt(vt) << 16n) |\n        BigInt(v)\n      ).toString();\n\n      const entry = faceToVertexIndex.get(key);\n      if (entry !== undefined) {\n        indices.push(entry);\n      } else {\n        console.assert(vertices.length % 8 === 0);\n\n        const index = vertices.length / 8;\n        faceToVertexIndex.set(key, index);\n        indices.push(index);\n\n        vertices.push(obj.vertices[(v - 1) * 3 + 0]);\n        vertices.push(obj.vertices[(v - 1) * 3 + 1]);\n        vertices.push(obj.vertices[(v - 1) * 3 + 2]);\n\n        vertices.push(obj.normals[(vn - 1) * 3 + 0]);\n        vertices.push(obj.normals[(vn - 1) * 3 + 1]);\n        vertices.push(obj.normals[(vn - 1) * 3 + 2]);\n\n        vertices.push(obj.texcoords[(vt - 1) * 2 + 0]);\n        vertices.push(obj.texcoords[(vt - 1) * 2 + 1]);\n      }\n    }\n\n    this.vbuf = device.createBuffer({\n      size: vertices.length * SIZE_FLOAT,\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(\n      this.vbuf,\n      0,\n      new Float32Array(vertices),\n      0,\n      vertices.length,\n    );\n\n    if (indices.length % 4 !== 0) {\n      console.warn(\"model indices aren't a multiple of 4\");\n      while (indices.length % 4 !== 0) {\n        indices.push(0);\n      }\n    }\n\n    this.ibuf = device.createBuffer({\n      size: indices.length * SIZE_UINT16,\n      usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(\n      this.ibuf,\n      0,\n      new Uint16Array(indices),\n      0,\n      indices.length,\n    );\n\n    this.indexCount = indices.length;\n  }\n\n  static async load(file: string) {\n    const obj = await OBJLoader.load(file);\n    return new Model(obj);\n  }\n\n  public draw(pass: GPURenderPassEncoder, instanceCount?: number) {\n    pass.setVertexBuffer(0, this.vbuf);\n    pass.setIndexBuffer(this.ibuf, \"uint16\");\n    pass.drawIndexed(this.indexCount, instanceCount);\n  }\n}\n\nclass Stats {\n  private beginTime = 0;\n  private prevTime = 0;\n  private textY = 0;\n  private canvasWidth = 0;\n  private context2D: CanvasRenderingContext2D;\n\n  private static FONT_SIZE = 13;\n\n  constructor(private canvas: HTMLCanvasElement) {\n    this.context2D = canvas.getContext(\"2d\")!;\n  }\n\n  public beginFrame(time: number) {\n    this.prevTime = this.beginTime;\n    this.beginTime = time;\n  }\n\n  public endFrame() {\n    const width = Math.round(this.canvasWidth) + 8;\n    const height = this.textY + 8;\n    if (width !== this.canvas.width || height !== this.canvas.height) {\n      this.canvas.width = width;\n      this.canvas.height = height;\n    }\n\n    this.canvasWidth = 100;\n    this.textY = 0;\n\n    this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.context2D.globalAlpha = 0.5;\n    this.context2D.fillStyle = \"white\";\n    this.context2D.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.context2D.globalAlpha = 1;\n\n    this.context2D.fillStyle = \"black\";\n    this.context2D.font = `bold ${Stats.FONT_SIZE}px monospace`;\n\n    const frameDelta = this.beginTime - this.prevTime;\n    const fps = (1 / frameDelta) * 1000;\n    this.draw(`ms/frame: ${frameDelta.toFixed(2)}ms (${Math.round(fps)}fps)`);\n\n    const updateDelta = performance.now() - this.beginTime;\n    const cpuFPS = (1 / updateDelta) * 1000;\n    this.draw(`cpu: ${updateDelta.toFixed(2)}ms (${Math.round(cpuFPS)}fps)`);\n\n    if (instrument !== undefined) {\n      const gpuDelta = instrument.avg / 1000 / 1000;\n      const gpuFPS = (1 / gpuDelta) * 1000;\n      this.draw(`gpu: ${gpuDelta.toFixed(2)}ms (${Math.round(gpuFPS)}fps)`);\n    }\n\n    let mem = 0;\n    const { memory } = performance as any;\n    if (memory !== undefined) {\n      mem = memory.usedJSHeapSize / 1024 / 1024;\n    }\n\n    if (mem !== 0) {\n      this.draw(`mem: ${mem.toFixed(2)}mb`);\n    }\n  }\n\n  private draw(text: string) {\n    const left = 5;\n    this.textY += Stats.FONT_SIZE;\n    this.context2D.fillText(text, left, this.textY);\n\n    this.canvasWidth = Math.max(\n      this.canvasWidth,\n      this.context2D.measureText(text).width + left,\n    );\n  }\n}\n\nclass Instrument {\n  private index = 0;\n  private querySet: GPUQuerySet;\n  private resolve: GPUBuffer;\n  private result: GPUBuffer;\n  public avg = 0;\n\n  private static MAX_QUERIES = 64;\n\n  constructor() {\n    this.querySet = device.createQuerySet({\n      type: \"timestamp\",\n      count: 2 * Instrument.MAX_QUERIES,\n    });\n\n    this.resolve = device.createBuffer({\n      size: this.querySet.count * 8,\n      usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC,\n    });\n\n    this.result = device.createBuffer({\n      size: this.querySet.count * 8,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n  }\n\n  public record() {\n    console.assert(this.index < Instrument.MAX_QUERIES);\n\n    const timestampWrites: GPURenderPassTimestampWrites = {\n      querySet: this.querySet,\n      beginningOfPassWriteIndex: this.index,\n      endOfPassWriteIndex: this.index + 1,\n    };\n\n    this.index += 2;\n    return timestampWrites;\n  }\n\n  public endFrame(command: GPUCommandEncoder) {\n    if (this.result.mapState !== \"unmapped\") {\n      return;\n    }\n\n    command.resolveQuerySet(\n      this.querySet,\n      0,\n      this.querySet.count,\n      this.resolve,\n      0,\n    );\n    command.copyBufferToBuffer(\n      this.resolve,\n      0,\n      this.result,\n      0,\n      this.result.size,\n    );\n  }\n\n  public async measure() {\n    if (this.result.mapState !== \"unmapped\") {\n      return;\n    }\n\n    await this.result.mapAsync(GPUMapMode.READ);\n\n    let total = 0;\n    const buf = new BigInt64Array(this.result.getMappedRange());\n    for (let i = 0; i < this.index; i += 2) {\n      const start = buf[i + 0];\n      const end = buf[i + 1];\n\n      total += Number(end - start);\n    }\n\n    this.result.unmap();\n\n    let count = this.index / 2;\n    this.index = 0;\n\n    if (count > 0) {\n      this.avg = total / count;\n    }\n  }\n}\n\ninterface CacheEntryBindGroup {\n  resource: GPUBindGroup;\n  descriptor: GPUBindGroupDescriptor;\n  lifetime: number;\n}\n\ninterface CacheEntrySampler {\n  resource: GPUSampler;\n  descriptor: GPUSamplerDescriptor;\n}\n\nclass RenderCache {\n  private bindGroupLayouts = new Map<GPURenderPipeline, GPUBindGroupLayout[]>();\n  private bindGroups: CacheEntryBindGroup[] = [];\n  private samplers: CacheEntrySampler[] = [];\n\n  public step() {\n    let i = 0;\n    while (i < this.bindGroups.length) {\n      this.bindGroups[i].lifetime--;\n      if (this.bindGroups[i].lifetime === 0) {\n        this.bindGroups[i] = this.bindGroups[this.bindGroups.length - 1];\n        this.bindGroups.pop();\n      } else {\n        i++;\n      }\n    }\n  }\n\n  public getBindGroupLayout(pipeline: GPURenderPipeline, index: number) {\n    const arr = this.bindGroupLayouts.get(pipeline);\n    if (arr === undefined) {\n      const layout = pipeline.getBindGroupLayout(index);\n      this.bindGroupLayouts.set(pipeline, [layout]);\n      return layout;\n    }\n\n    const item = arr[index];\n    if (item === undefined) {\n      const layout = pipeline.getBindGroupLayout(index);\n      arr[index] = layout;\n      return layout;\n    }\n\n    return item;\n  }\n\n  public createBindGroup(descriptor: GPUBindGroupDescriptor) {\n    const lifetime = 4;\n\n    for (const bindGroup of this.bindGroups) {\n      if (RenderCache.sameBindGroup(bindGroup.descriptor, descriptor)) {\n        return bindGroup.resource;\n      }\n    }\n\n    const bindGroup = device.createBindGroup(descriptor);\n    this.bindGroups.push({ resource: bindGroup, descriptor, lifetime });\n    return bindGroup;\n  }\n\n  private static sameBindGroup(\n    lhs: GPUBindGroupDescriptor,\n    rhs: GPUBindGroupDescriptor,\n  ) {\n    console.assert(lhs.layout === rhs.layout);\n\n    const left = lhs.entries as GPUBindGroupEntry[];\n    const right = rhs.entries as GPUBindGroupEntry[];\n\n    if (left.length !== right.length) {\n      return false;\n    }\n\n    for (let i = 0; i < left.length; i++) {\n      if (!RenderCache.sameBindGroupEntry(left[i], right[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private static sameBindGroupEntry(\n    lhs: GPUBindGroupEntry,\n    rhs: GPUBindGroupEntry,\n  ) {\n    if (lhs.binding !== rhs.binding) {\n      return false;\n    }\n\n    if (lhs.resource !== rhs.resource) {\n      if (\n        !lhs.resource.hasOwnProperty(\"buffer\") ||\n        !rhs.resource.hasOwnProperty(\"buffer\")\n      ) {\n        return false;\n      }\n\n      const l = lhs.resource as GPUBufferBinding;\n      const r = rhs.resource as GPUBufferBinding;\n\n      if (l.buffer !== r.buffer || l.offset !== r.offset || l.size !== r.size) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public createSampler(descriptor: GPUSamplerDescriptor) {\n    for (const item of this.samplers) {\n      if (RenderCache.sameSampler(item.descriptor, descriptor)) {\n        return item.resource;\n      }\n    }\n\n    const sampler = device.createSampler(descriptor);\n    this.samplers.push({ resource: sampler, descriptor });\n    return sampler;\n  }\n\n  private static sameSampler(\n    lhs: GPUSamplerDescriptor,\n    rhs: GPUSamplerDescriptor,\n  ) {\n    return (\n      lhs.addressModeU === rhs.addressModeU &&\n      lhs.addressModeV === rhs.addressModeV &&\n      lhs.addressModeW === rhs.addressModeW &&\n      lhs.magFilter === rhs.magFilter &&\n      lhs.minFilter === rhs.minFilter &&\n      lhs.mipmapFilter === rhs.mipmapFilter &&\n      lhs.lodMinClamp === rhs.lodMinClamp &&\n      lhs.lodMaxClamp === rhs.lodMaxClamp &&\n      lhs.compare === rhs.compare &&\n      lhs.maxAnisotropy === rhs.maxAnisotropy\n    );\n  }\n}\n\nclass Sky {\n  private pipeline: GPURenderPipeline;\n\n  constructor() {\n    const shader = device.createShaderModule({ code: uniformsWGSL + skyWGSL });\n\n    this.pipeline = device.createRenderPipeline({\n      layout: \"auto\",\n      primitive: {\n        topology: \"triangle-list\",\n        cullMode: \"back\",\n      },\n      depthStencil: {\n        format: \"depth24plus\",\n        depthCompare: \"less-equal\",\n        depthWriteEnabled: true,\n      },\n      vertex: {\n        module: shader,\n        entryPoint: \"vp\",\n      },\n      fragment: {\n        module: shader,\n        entryPoint: \"fp\",\n        targets: [{ format: presentationFormat }],\n      },\n    });\n  }\n\n  public run(pass: GPURenderPassEncoder) {\n    pass.setPipeline(this.pipeline);\n    pass.draw(3);\n  }\n}\n\nclass Shell {\n  private pipeline: GPURenderPipeline;\n  private bindGroup: GPUBindGroup;\n\n  private static SHELL_COUNT = 64;\n\n  constructor() {\n    const shader = device.createShaderModule({\n      code: uniformsWGSL + shellWGSL,\n    });\n\n    this.pipeline = device.createRenderPipeline({\n      layout: \"auto\",\n      primitive: {\n        topology: \"triangle-list\",\n      },\n      depthStencil: {\n        format: \"depth24plus\",\n        depthCompare: \"less\",\n        depthWriteEnabled: true,\n      },\n      vertex: {\n        entryPoint: \"vp\",\n        module: shader,\n        buffers: [\n          {\n            stepMode: \"vertex\",\n            arrayStride: (3 + 3 + 2) * SIZE_FLOAT,\n            attributes: [\n              { shaderLocation: 0, offset: 0, format: \"float32x3\" },\n              { shaderLocation: 1, offset: 0, format: \"float32x3\" },\n              { shaderLocation: 2, offset: 0, format: \"float32x2\" },\n            ],\n          },\n        ],\n        constants: {\n          SHELL_COUNT: Shell.SHELL_COUNT,\n        },\n      },\n      fragment: {\n        entryPoint: \"fp\",\n        module: shader,\n        targets: [\n          {\n            format: presentationFormat,\n            blend: {\n              color: {\n                srcFactor: \"src-alpha\",\n                dstFactor: \"one-minus-src-alpha\",\n              },\n              alpha: {\n                srcFactor: \"src-alpha\",\n                dstFactor: \"one-minus-src-alpha\",\n              },\n            },\n          },\n        ],\n        constants: {\n          SHELL_COUNT: Shell.SHELL_COUNT,\n        },\n      },\n    });\n\n    this.bindGroup = device.createBindGroup({\n      layout: this.pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer: ubuf } }],\n    });\n  }\n\n  public run(pass: GPURenderPassEncoder, model?: Model) {\n    pass.setPipeline(this.pipeline);\n    pass.setBindGroup(0, this.bindGroup);\n    model?.draw(pass, Shell.SHELL_COUNT);\n  }\n}\n\nclass FXAA {\n  private pipeline: GPURenderPipeline;\n\n  constructor() {\n    const shader = device.createShaderModule({ code: uniformsWGSL + fxaaWGSL });\n\n    this.pipeline = device.createRenderPipeline({\n      layout: \"auto\",\n      primitive: {\n        topology: \"triangle-list\",\n        cullMode: \"back\",\n      },\n      vertex: {\n        module: shader,\n        entryPoint: \"vp\",\n      },\n      fragment: {\n        module: shader,\n        entryPoint: \"fp\",\n        targets: [{ format: presentationFormat }],\n      },\n    });\n  }\n\n  public run(pass: GPURenderPassEncoder, inView: GPUTextureView) {\n    pass.setPipeline(this.pipeline);\n    pass.setBindGroup(\n      0,\n      cache.createBindGroup({\n        layout: cache.getBindGroupLayout(this.pipeline, 0),\n        entries: [\n          { binding: 0, resource: { buffer: ubuf } },\n          { binding: 1, resource: inView },\n          {\n            binding: 2,\n            resource: cache.createSampler({\n              minFilter: \"linear\",\n              magFilter: \"linear\",\n            }),\n          },\n        ],\n      }),\n    );\n    pass.draw(3);\n  }\n}\n\nasync function main() {\n  let adapter: GPUAdapter;\n  let canvas: HTMLCanvasElement;\n  let context: GPUCanvasContext;\n\n  try {\n    const request = await navigator.gpu.requestAdapter();\n    if (request === null) {\n      throw \"no adapter\";\n    }\n    adapter = request;\n\n    device = await adapter.requestDevice({\n      requiredFeatures: [\"timestamp-query\"],\n    });\n\n    canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n    context = canvas.getContext(\"webgpu\")!;\n    if (context === null) {\n      throw \"no context\";\n    }\n  } catch (e) {\n    alert(\"Your browser doesn't support WebGPU\");\n    return;\n  }\n\n  presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\n  canvas.style.width = window.innerWidth + \"px\";\n  canvas.style.height = window.innerHeight + \"px\";\n  canvas.width = window.innerWidth * window.devicePixelRatio;\n  canvas.height = window.innerHeight * window.devicePixelRatio;\n  addEventListener(\"resize\", () => {\n    canvas.style.width = window.innerWidth + \"px\";\n    canvas.style.height = window.innerHeight + \"px\";\n    canvas.width = window.innerWidth * window.devicePixelRatio;\n    canvas.height = window.innerHeight * window.devicePixelRatio;\n  });\n\n  mouse.prevX = canvas.width / 2;\n  mouse.prevY = canvas.height / 2;\n  mouse.x = mouse.prevX;\n  mouse.y = mouse.prevY;\n\n  context.configure({\n    device,\n    format: presentationFormat,\n    alphaMode: \"premultiplied\",\n  });\n\n  const stats = new Stats(\n    document.getElementById(\"stats\") as HTMLCanvasElement,\n  );\n\n  if (\n    adapter.features.has(\"timestamp-query\") &&\n    typeof device.createQuerySet === \"function\"\n  ) {\n    instrument = new Instrument();\n  }\n\n  const uniformBuffer = new ArrayBuffer(SIZE_MAT4 + SIZE_MAT4 + SIZE_VEC4);\n  const u = {\n    cameraView: new Float32Array(uniformBuffer, 0, 16),\n    cameraProjection: new Float32Array(uniformBuffer, 16 * SIZE_FLOAT, 16),\n    screenResolution: new Float32Array(uniformBuffer, 32 * SIZE_FLOAT, 4),\n  };\n\n  uniformsWGSL = `\nstruct Uniforms {\n  cameraView: mat4x4f,\n  cameraProjection: mat4x4f,\n  screenResolution: vec2f,\n}\n`;\n\n  ubuf = device.createBuffer({\n    size: uniformBuffer.byteLength,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n  });\n\n  cache = new RenderCache();\n\n  const shell = new Shell();\n  const sky = new Sky();\n  const fxaa = new FXAA();\n\n  const camera = new Camera(vec3.create(0, 0, 3), -90 * RADIANS);\n\n  let model: Model | undefined;\n  Model.load(\"data/sphere.obj\").then((m) => (model = m));\n\n  let renderTarget: GPUTexture;\n  let renderTargetView: GPUTextureView;\n  let depthBuffer: GPUTexture;\n  let depthBufferView: GPUTextureView;\n  let renderWidth = 0;\n  let renderHeight = 0;\n\n  function update(time: number) {\n    stats.beginFrame(time);\n\n    const { width, height } = canvas;\n\n    camera.update();\n\n    mouse.deltaX = mouse.x - mouse.prevX;\n    mouse.deltaY = mouse.y - mouse.prevY;\n    mouse.prevX = mouse.x;\n    mouse.prevY = mouse.y;\n    mouse.wheel = 0;\n\n    camera.view(u.cameraView);\n    mat4.perspective(60 * RADIANS, width / height, 0.1, 50, u.cameraProjection);\n\n    vec2.set(width, height, u.screenResolution);\n\n    device.queue.writeBuffer(\n      ubuf,\n      0,\n      uniformBuffer,\n      0,\n      uniformBuffer.byteLength,\n    );\n\n    if (renderWidth !== width && renderHeight !== height) {\n      renderWidth = width;\n      renderHeight = height;\n\n      renderTarget?.destroy();\n      depthBuffer?.destroy();\n\n      renderTarget = device.createTexture({\n        size: [width, height, 1],\n        usage:\n          GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n        format: presentationFormat,\n      });\n      renderTargetView = renderTarget.createView();\n\n      depthBuffer = device.createTexture({\n        size: [width, height, 1],\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        format: \"depth24plus\",\n      });\n      depthBufferView = depthBuffer.createView();\n    }\n\n    const command = device.createCommandEncoder();\n    const surfaceView = context.getCurrentTexture().createView();\n\n    {\n      const pass = command.beginRenderPass({\n        label: \"forward rendering pass\",\n        timestampWrites: instrument?.record(),\n        colorAttachments: [\n          {\n            view: renderTargetView,\n            clearValue: [0.7, 0.8, 0.9, 1],\n            loadOp: \"clear\",\n            storeOp: \"store\",\n          },\n        ],\n        depthStencilAttachment: {\n          view: depthBufferView,\n          depthClearValue: 1,\n          depthLoadOp: \"clear\",\n          depthStoreOp: \"store\",\n          depthReadOnly: false,\n        },\n      });\n\n      sky.run(pass);\n      shell.run(pass, model);\n\n      pass.end();\n    }\n\n    {\n      const pass = command.beginRenderPass({\n        label: \"fxaa pass\",\n        timestampWrites: instrument?.record(),\n        colorAttachments: [\n          {\n            view: surfaceView,\n            clearValue: [0, 0, 0, 1],\n            loadOp: \"clear\",\n            storeOp: \"store\",\n          },\n        ],\n      });\n      fxaa.run(pass, renderTargetView);\n      pass.end();\n    }\n\n    instrument?.endFrame(command);\n    device.queue.submit([command.finish()]);\n\n    instrument?.measure();\n    stats.endFrame();\n    requestAnimationFrame(update);\n  }\n  requestAnimationFrame(update);\n}\n\nmain();\n"],
  "mappings": "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",
  "names": ["wrapConstructor", "OriginalConstructor", "modifier", "args", "ZeroArray", "a", "EPSILON", "getAPIImpl", "Ctor", "create", "x", "y", "newDst", "fromValues", "set", "dst", "ceil", "v", "floor", "round", "clamp", "min", "max", "add", "a", "b", "addScaled", "scale", "angle", "ax", "ay", "bx", "by", "mag1", "mag2", "mag", "cosine", "dot", "subtract", "sub", "equalsApproximately", "utils.EPSILON", "equals", "lerp", "t", "lerpV", "mulScalar", "k", "divScalar", "inverse", "invert", "cross", "z", "length", "v0", "v1", "len", "lengthSq", "lenSq", "distance", "dx", "dy", "dist", "distanceSq", "distSq", "normalize", "negate", "copy", "clone", "multiply", "mul", "divide", "div", "random", "zero", "transformMat4", "m", "transformMat3", "rotate", "rad", "p0", "p1", "sinC", "cosC", "setLength", "truncate", "maxLen", "midpoint", "cache", "getAPI", "api", "vec2", "getVec2API", "v2", "v3", "v4", "v5", "v6", "v7", "v8", "fromMat4", "m4", "fromQuat", "q", "w", "x2", "y2", "z2", "xx", "yx", "yy", "zx", "zy", "zz", "wx", "wy", "wz", "identity", "transpose", "m00", "m01", "m02", "m10", "m11", "m12", "m20", "m21", "m22", "b01", "b11", "b21", "invDet", "determinant", "a00", "a01", "a02", "a10", "a11", "a12", "a20", "a21", "a22", "b00", "b02", "b10", "b12", "b20", "b22", "setTranslation", "getTranslation", "getAxis", "axis", "off", "setAxis", "getScaling", "xy", "translation", "translate", "rotation", "angleInRadians", "c", "s", "scaling", "uniformScaling", "uniformScale", "az", "bz", "t1", "t2", "dz", "zScale", "transformMat4Upper3x3", "transformQuat", "qx", "qy", "qz", "w2", "uvX", "uvY", "uvZ", "xz", "yz", "rotateX", "p", "r", "rotateY", "rotateZ", "vec3", "getVec3API", "v9", "v10", "v11", "v12", "v13", "v14", "v15", "fromMat3", "m3", "m03", "m13", "m23", "m30", "m31", "m32", "m33", "tmp0", "tmp1", "tmp2", "tmp3", "tmp4", "tmp5", "tmp6", "tmp7", "tmp8", "tmp9", "tmp10", "tmp11", "tmp12", "tmp13", "tmp14", "tmp15", "tmp16", "tmp17", "tmp18", "tmp19", "tmp20", "tmp21", "tmp22", "tmp23", "t0", "t3", "d", "a03", "a13", "a23", "a30", "a31", "a32", "a33", "b03", "b13", "b23", "b30", "b31", "b32", "b33", "perspective", "fieldOfViewYInRadians", "aspect", "zNear", "zFar", "f", "rangeInv", "perspectiveReverseZ", "ortho", "left", "right", "bottom", "top", "near", "far", "frustum", "frustumReverseZ", "xAxis", "yAxis", "zAxis", "aim", "position", "target", "up", "cameraAim", "eye", "lookAt", "rotationX", "rotationY", "rotationZ", "axisRotation", "n", "oneMinusCosine", "axisRotate", "r00", "r01", "r02", "r10", "r11", "r12", "r20", "r21", "r22", "fromAxisAngle", "halfAngle", "toAxisAngle", "aw", "bw", "qw", "slerp", "cosOmega", "scale0", "scale1", "omega", "sinOmega", "a0", "a1", "a2", "a3", "invDot", "conjugate", "fromMat", "trace", "root", "invRoot", "i", "j", "fromEuler", "xAngleInRadians", "yAngleInRadians", "zAngleInRadians", "order", "xHalfAngle", "yHalfAngle", "zHalfAngle", "sx", "cx", "sy", "cy", "sz", "cz", "tempVec3", "xUnitVec3", "yUnitVec3", "rotationTo", "aUnit", "bUnit", "tempQuat1", "tempQuat2", "sqlerp", "dw", "wgpuMatrixAPI", "Mat3Ctor", "Mat4Ctor", "QuatCtor", "Vec2Ctor", "Vec3Ctor", "Vec4Ctor", "getMat4API", "getMat3API", "getQuatAPI", "getVec4API", "mat4", "mat3", "quat", "vec4", "mat4d", "mat3d", "quatd", "vec2d", "vec3d", "vec4d", "mat4n", "mat3n", "quatn", "vec2n", "vec3n", "vec4n", "ZeroArray", "isWhitespace", "c", "OBJLoader", "_OBJLoader", "file", "loader", "r", "out", "other", "start", "str", "v0", "tok", "sky_default", "shell_default", "fxaa_default", "RADIANS", "SIZE_UINT16", "SIZE_FLOAT", "SIZE_VEC4", "SIZE_MAT4", "device", "presentationFormat", "cache", "instrument", "uniformsWGSL", "ubuf", "keyboard", "mouse", "e", "clamp", "n", "lo", "hi", "Camera", "vec3", "pos", "yaw", "forward", "right", "up", "moveSpeed", "dst", "mat4", "Model", "_Model", "obj", "faceToVertexIndex", "vertices", "indices", "i", "v", "vt", "vn", "key", "entry", "index", "file", "OBJLoader", "pass", "instanceCount", "Stats", "_Stats", "canvas", "time", "width", "height", "frameDelta", "fps", "updateDelta", "cpuFPS", "gpuDelta", "gpuFPS", "mem", "memory", "text", "Instrument", "_Instrument", "timestampWrites", "command", "total", "buf", "start", "end", "count", "RenderCache", "_RenderCache", "pipeline", "arr", "layout", "item", "descriptor", "bindGroup", "lhs", "rhs", "left", "l", "r", "sampler", "Sky", "shader", "sky_default", "Shell", "_Shell", "shell_default", "model", "FXAA", "fxaa_default", "inView", "main", "adapter", "context", "request", "stats", "uniformBuffer", "u", "shell", "sky", "fxaa", "camera", "m", "renderTarget", "renderTargetView", "depthBuffer", "depthBufferView", "renderWidth", "renderHeight", "update", "vec2", "surfaceView"]
}
